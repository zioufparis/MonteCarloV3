import React, { useState, useEffect } from "react";
import {
  LineChart,
  Line,
  XAxis,
  YAxis,
  CartesianGrid,
  Tooltip,
  ResponsiveContainer,
  Area,
  AreaChart,
  PieChart,
  Pie,
  Cell,
  BarChart,
  Bar,
} from "recharts";
// √Ä ajouter dans les imports (g√©n√©ralement en haut du fichier)
import * as XLSX from "xlsx";
import AuthGate from "./AuthGate"; // ou le chemin vers votre composant
const Simulateur = () => {
  const [results, setResults] = useState([]);
  const [stats, setStats] = useState<any>({});
  const [ruinProbability, setRuinProbability] = useState([]);
  const [timelineData, setTimelineData] = useState([]);
  // √âtats pour la sauvegarde et l'export
  const [savedConfigs, setSavedConfigs] = useState([]);
  const [configName, setConfigName] = useState("");
  const [showSaveDialog, setShowSaveDialog] = useState(false);
  const [finalAllocations, setFinalAllocations] = useState({});
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [currentUser, setCurrentUser] = useState(null);
  const [stressTestResults, setStressTestResults] = useState({});
  const [showStressTest, setShowStressTest] = useState(false);
  const [isStressTestLoading, setIsStressTestLoading] = useState(false);
  // Charger les configurations sauvegard√©es au d√©marrage
  useEffect(() => {
    const saved = JSON.parse(
      localStorage.getItem("simulateur-configs") || "[]"
    );
    setSavedConfigs(saved);

    // V√©rifier l'authentication existante
    const authData = localStorage.getItem("simulateur-authenticated");
    if (authData) {
      try {
        const userData = JSON.parse(authData);
        setCurrentUser(userData);
        setIsAuthenticated(true);
      } catch (err) {
        localStorage.removeItem("simulateur-authenticated");
      }
    }
  }, []);

  // Sauvegarder une configuration
  const saveConfiguration = () => {
    if (!configName.trim()) return;

    const newConfig = {
      id: Date.now(),
      name: configName,
      parameters: { ...parameters },
      date: new Date().toLocaleDateString("fr-FR"),
    };

    const updatedConfigs = [...savedConfigs, newConfig];
    setSavedConfigs(updatedConfigs);
    localStorage.setItem("simulateur-configs", JSON.stringify(updatedConfigs));

    setConfigName("");
    setShowSaveDialog(false);
  };

  // Charger une configuration
  const loadConfiguration = (config) => {
    setParameters(config.parameters);
  };

  // Supprimer une configuration
  const deleteConfiguration = (configId) => {
    const updatedConfigs = savedConfigs.filter((c) => c.id !== configId);
    setSavedConfigs(updatedConfigs);
    localStorage.setItem("simulateur-configs", JSON.stringify(updatedConfigs));
  };

  // Exporter les r√©sultats
  // Exporter les r√©sultats en Excel
  const exportResults = () => {
    // Pr√©parer les donn√©es pour l'export Excel
    const worksheetData = [
      // En-t√™tes
      [
        "Mois",
        "Date",
        "Patrimoine D√©but",
        "Rendement Mensuel",
        "Contribution",
        "Patrimoine Fin",
        "% Variation",
      ],
      // Donn√©es de la timeline
      ...timelineData.map((item, index) => [
        index + 1,
        item.dateLabel,
        item.valueStart,
        item.monthlyReturn,
        item.contribution,
        item.valueEnd,
        item.returnRate / 100, // Excel pr√©f√®re les pourcentages en d√©cimal
      ]),
    ];

    // Ajouter une feuille s√©par√©e avec les statistiques
    const statsData = [
      ["Statistiques de la Simulation", ""],
      ["", ""],
      ["Param√®tres", ""],
      ["Patrimoine Initial", parameters.initialValue],
      ["Horizon (ann√©es)", parameters.timeHorizon],
      ["√âpargne Mensuelle", parameters.monthlyContribution],
      ["", ""],
      ["R√©sultats", ""],
      ["M√©diane Finale", stats.median],
      ["Moyenne Finale", stats.mean],
      ["√âcart-type", stats.standardDeviation],
      ["Minimum", stats.min],
      ["Maximum", stats.max],
      ["", ""],
      ["Analyses Avanc√©es", ""],
      ["Ratio de Sharpe", stats.advancedAnalytics?.sharpeRatio || "N/A"],
      [
        "Drawdown Maximum (%)",
        stats.advancedAnalytics?.maxDrawdown * 100 || "N/A",
      ],
      ["CAGR Moyen (%)", stats.advancedAnalytics?.cagr * 100 || "N/A"],
      ["Ratio de Sortino", stats.advancedAnalytics?.sortinoRatio || "N/A"],
      ["", ""],
      ["Coast FIRE", ""],
      ["Seuil Coast FIRE", stats.coastFIRE?.coastFIREAmount || "N/A"],
      [
        "Objectif Atteint",
        stats.coastFIRE?.hasReachedCoastFIRE ? "Oui" : "Non",
      ],
      ["√âcart/Surplus", stats.coastFIRE?.gapAmount || "N/A"],
    ];

    // Cr√©er le workbook Excel
    const wb = XLSX.utils.book_new();

    // Feuille 1: Timeline d√©taill√©e
    const ws1 = XLSX.utils.aoa_to_sheet(worksheetData);

    // Formater les colonnes mon√©taires
    const range = XLSX.utils.decode_range(ws1["!ref"]);
    for (let R = 1; R <= range.e.r; R++) {
      // Colonnes C, D, E, F (patrimoine, rendement, contribution, patrimoine fin)
      ["C", "D", "E", "F"].forEach((col) => {
        const cellAddress = col + (R + 1);
        if (ws1[cellAddress]) {
          ws1[cellAddress].z = '"‚Ç¨"#,##0';
        }
      });
      // Colonne G (pourcentage)
      const cellG = "G" + (R + 1);
      if (ws1[cellG]) {
        ws1[cellG].z = "0.00%";
      }
    }

    // Feuille 2: Statistiques
    const ws2 = XLSX.utils.aoa_to_sheet(statsData);

    // Ajouter les feuilles au workbook
    XLSX.utils.book_append_sheet(wb, ws1, "Timeline D√©taill√©e");
    XLSX.utils.book_append_sheet(wb, ws2, "Statistiques");

    // T√©l√©charger le fichier
    const fileName = `simulation-patrimoine-${
      new Date().toISOString().split("T")[0]
    }.xlsx`;
    XLSX.writeFile(wb, fileName);
  };
  const [activeTab, setActiveTab] = useState("evolution");
  const [parameters, setParameters] = useState({
    initialValue: 300000,
    timeHorizon: 30,
    monthlyContribution: 500,
    simulations: 5000,
    // Nouveaux param√®tres avanc√©s
    inflation: 0.025, // 2.5% par an
    taxRate: 0.3, // 30% sur les plus-values
    rebalancingFrequency: 12, // Tous les 12 mois (1 = mensuel, 12 = annuel, 0 = jamais)
    realEstate: { allocation: 0.42, return: 0.035, volatility: 0.12 },
    stocks: { allocation: 0.34, return: 0.05, volatility: 0.18 },
    crypto: { allocation: 0.13, return: 0.1, volatility: 0.45 },
    cash: { allocation: 0.06, return: -0.02, volatility: 0.02 },
    other: { allocation: 0.05, return: 0.02, volatility: 0.08 },
    // Param√®tres Coast FIRE
    currentAge: 30,
    retirementAge: 65,
    retirementGoal: 1000000,
    // Phase accumulation / consommation
    accumulationYears: 10, // par d√©faut : 10 ans d‚Äô√©pargne
    consumptionYears: 20, // puis 20 ans de consommation
    monthlyWithdrawal: 1500, // montant retir√© chaque mois pendant la retraite
    monthlyWithdrawalAllocation: {
      realEstate: 0.3,
      stocks: 0.5,
      crypto: 0.1,
      cash: 0.05,
      other: 0.05,
    },

   
    currentSavings: 300000, // Utilise initialValue par d√©faut
    // Nouvelle r√©partition des versements mensuels (allocation des contributions)
    monthlyAllocation: {
      realEstate: 0.5,
      stocks: 0.5,
      crypto: 0,
      cash: 0,
      other: 0,
    },
  });
  // Sc√©narios pr√©d√©finis
  const presetScenarios = {
    conservateur: {
      name: "üõ°Ô∏è Conservateur",
      description: "Faible risque, rendements stables",
      realEstate: { allocation: 0.3, return: 0.025, volatility: 0.08 },
      stocks: { allocation: 0.2, return: 0.04, volatility: 0.12 },
      crypto: { allocation: 0.02, return: 0.08, volatility: 0.35 },
      cash: { allocation: 0.35, return: -0.015, volatility: 0.01 },
      other: { allocation: 0.13, return: 0.02, volatility: 0.05 },
      rebalancingFrequency: 6,
    },
    equilibre: {
      name: "‚öñÔ∏è √âquilibr√©",
      description: "√âquilibre risque/rendement",
      realEstate: { allocation: 0.42, return: 0.035, volatility: 0.12 },
      stocks: { allocation: 0.34, return: 0.05, volatility: 0.18 },
      crypto: { allocation: 0.13, return: 0.1, volatility: 0.45 },
      cash: { allocation: 0.06, return: -0.02, volatility: 0.02 },
      other: { allocation: 0.05, return: 0.02, volatility: 0.08 },
      rebalancingFrequency: 12,
    },
    agressif: {
      name: "üöÄ Agressif",
      description: "Risque √©lev√©, potentiel de rendement maximal",
      realEstate: { allocation: 0.25, return: 0.04, volatility: 0.15 },
      stocks: { allocation: 0.5, return: 0.065, volatility: 0.22 },
      crypto: { allocation: 0.2, return: 0.12, volatility: 0.55 },
      cash: { allocation: 0.02, return: -0.025, volatility: 0.01 },
      other: { allocation: 0.03, return: 0.025, volatility: 0.1 },
      rebalancingFrequency: 12,
    },
  } as const;

  type ScenarioKey = keyof typeof presetScenarios;

  const applyPresetScenario = (scenarioKey: ScenarioKey) => {
    const scenario = presetScenarios[scenarioKey];
    setParameters((prev) => ({
      ...prev,
      realEstate: scenario.realEstate,
      stocks: scenario.stocks,
      crypto: scenario.crypto,
      cash: scenario.cash,
      other: scenario.other,
      rebalancingFrequency: scenario.rebalancingFrequency,
    }));
  };

  // Am√©lioration 1: G√©n√©rateur de nombres normaux optimis√©
  let normalCache = null;
  const normalRandom = () => {
    if (normalCache !== null) {
      const value = normalCache;
      normalCache = null;
      return value;
    }

    let u = 0,
      v = 0;
    while (u === 0) u = Math.random();
    while (v === 0) v = Math.random();

    const z0 = Math.sqrt(-2 * Math.log(u)) * Math.cos(2 * Math.PI * v);
    const z1 = Math.sqrt(-2 * Math.log(u)) * Math.sin(2 * Math.PI * v);

    normalCache = z1;
    return z0;
  };
  // Am√©lioration 2: Matrice de corr√©lation r√©aliste
  const DEFAULT_CORRELATION_MATRIX = {
    realEstate: {
      realEstate: 1.0,
      stocks: 0.3,
      crypto: 0.1,
      cash: -0.1,
      other: 0.2,
    },
    stocks: {
      realEstate: 0.3,
      stocks: 1.0,
      crypto: 0.4,
      cash: -0.2,
      other: 0.5,
    },
    crypto: {
      realEstate: 0.1,
      stocks: 0.4,
      crypto: 1.0,
      cash: -0.1,
      other: 0.3,
    },
    cash: {
      realEstate: -0.1,
      stocks: -0.2,
      crypto: -0.1,
      cash: 1.0,
      other: -0.1,
    },
    other: {
      realEstate: 0.2,
      stocks: 0.5,
      crypto: 0.3,
      cash: -0.1,
      other: 1.0,
    },
  };

  // Am√©lioration 3: D√©composition de Cholesky
  const choleskyDecomposition = (correlationMatrix) => {
    const assets = Object.keys(correlationMatrix);
    const n = assets.length;
    const L = Array(n)
      .fill(0)
      .map(() => Array(n).fill(0));

    for (let i = 0; i < n; i++) {
      for (let j = 0; j <= i; j++) {
        const corr = correlationMatrix[assets[i]][assets[j]];
        if (i === j) {
          const sum = L[i].slice(0, j).reduce((acc, val) => acc + val * val, 0);
          L[i][j] = Math.sqrt(Math.max(0, corr - sum));
        } else {
          const sum = L[i]
            .slice(0, j)
            .reduce((acc, val, k) => acc + val * L[j][k], 0);
          L[i][j] = L[j][j] !== 0 ? (corr - sum) / L[j][j] : 0;
        }
      }
    }

    return { L, assets };
  };

  // Am√©lioration 4: G√©n√©ration de rendements corr√©l√©s
  const generateCorrelatedReturns = (baseReturns, volatilities, cholesky) => {
    const { L, assets } = cholesky;
    const independentRandom = assets.map(() => normalRandom());
    const correlatedReturns = {};

    for (let i = 0; i < assets.length; i++) {
      const asset = assets[i];
      let correlatedValue = 0;
      for (let j = 0; j <= i; j++) {
        correlatedValue += L[i][j] * independentRandom[j];
      }
      correlatedReturns[asset] =
        baseReturns[asset] + correlatedValue * volatilities[asset];
    }

    return correlatedReturns;
  };

  // Am√©lioration 5: Inflation stochastique
  const generateInflationRate = (baseInflation, volatility = 0.008) => {
    return baseInflation + normalRandom() * volatility;
  };
  // 1. Fonction pour calculer les analyses avanc√©es
  // √Ä ajouter apr√®s votre fonction normalRandom()
  const applyStressTest = (crisisKey, parameters, historicalCrises) => {
    const crisis = historicalCrises[crisisKey];
    const stressParameters = { ...parameters };

    Object.keys(crisis.impacts).forEach((asset) => {
      if (stressParameters[asset]) {
        stressParameters[asset] = {
          ...stressParameters[asset],
          return: stressParameters[asset].return, // Ne pas modifier le rendement
          volatility: stressParameters[asset].volatility * 1.5, // Augmenter la volatilit√©
        };
      }
    });

    return stressParameters;
  };

  const runSingleStressSimulation = (stressParams, crisisKey) => {
    const crisis = historicalCrises[crisisKey];

    const simulations = 1000;
    const finalValues = [];

    const maxStart = stressParams.timeHorizon * 12 - crisis.duration;
    const crisisStartMonth = Math.floor(Math.random() * maxStart);
    const crisisEndMonth = crisisStartMonth + crisis.duration;

    for (let sim = 0; sim < simulations; sim++) {
      let currentValue = stressParams.initialValue;

      for (let year = 0; year < stressParams.timeHorizon; year++) {
        for (let month = 1; month <= 12; month++) {
          const totalMonths = year * 12 + month;
          const isCrisis =
            totalMonths >= crisisStartMonth && totalMonths < crisisEndMonth;

          const crisisAdjusted = (assetKey) => {
            const base = stressParams[assetKey];
            const impact = crisis.impacts[assetKey] || 0;

            const monthlyBaseReturn = base.return / 12;

            const monthlyCrisisShock = isCrisis
              ? Math.pow(1 + impact, 1 / crisis.duration) - 1
              : 0;

            const monthlyReturn = monthlyBaseReturn + monthlyCrisisShock;
            const volatility = isCrisis
              ? base.volatility * 1.5
              : base.volatility;

            return {
              monthlyReturn,
              volatility,
            };
          };

          const re = crisisAdjusted("realEstate");
          const st = crisisAdjusted("stocks");
          const cr = crisisAdjusted("crypto");
          const ca = crisisAdjusted("cash");
          const ot = crisisAdjusted("other");

          const portfolioReturn =
            stressParams.realEstate.allocation *
              (re.monthlyReturn +
                (normalRandom() * re.volatility) / Math.sqrt(12)) +
            stressParams.stocks.allocation *
              (st.monthlyReturn +
                (normalRandom() * st.volatility) / Math.sqrt(12)) +
            stressParams.crypto.allocation *
              (cr.monthlyReturn +
                (normalRandom() * cr.volatility) / Math.sqrt(12)) +
            stressParams.cash.allocation *
              (ca.monthlyReturn +
                (normalRandom() * ca.volatility) / Math.sqrt(12)) +
            stressParams.other.allocation *
              (ot.monthlyReturn +
                (normalRandom() * ot.volatility) / Math.sqrt(12));

          currentValue *= 1 + portfolioReturn;
          currentValue +=
            stressParams.monthlyContribution *
            Math.pow(1 + stressParams.inflation, year);
          currentValue = Math.max(0, currentValue);
        }
      }

      finalValues.push(currentValue);
    }

    finalValues.sort((a, b) => a - b);

    return {
      mean: finalValues.reduce((a, b) => a + b, 0) / simulations,
      median: finalValues[Math.floor(simulations * 0.5)],
      p10: finalValues[Math.floor(simulations * 0.1)],
      p90: finalValues[Math.floor(simulations * 0.9)],
      worstCase: finalValues[0],
      lossProbability:
        (finalValues.filter((v) => v < stressParams.initialValue).length /
          simulations) *
        100,
    };
  };

  const calculateAdvancedAnalytics = (
    allSimulations: any[],
    parameters: any
  ) => {
    const { timeHorizon, initialValue, inflation } = parameters;

    // Calcul du Sharpe Ratio moyen
    const sharpeRatios = allSimulations.map((simulation) => {
      const returns = [];
      for (let i = 1; i < simulation.length; i++) {
        const yearReturn =
          (simulation[i].value - simulation[i - 1].value) /
          simulation[i - 1].value;
        returns.push(yearReturn);
      }

      if (returns.length === 0) return 0;

      const meanReturn = returns.reduce((a, b) => a + b, 0) / returns.length;
      const returnStd = Math.sqrt(
        returns.reduce((sum, ret) => sum + Math.pow(ret - meanReturn, 2), 0) /
          returns.length
      );
      const riskFreeRate = 0.02; // Taux sans risque √† 2%

      return returnStd > 0 ? (meanReturn - riskFreeRate) / returnStd : 0;
    });

    const avgSharpeRatio =
      sharpeRatios.reduce((a, b) => a + b, 0) / sharpeRatios.length;

    // Calcul du Maximum Drawdown moyen
    const maxDrawdowns = allSimulations.map((simulation) => {
      let maxDrawdown = 0;
      let peak = simulation[0].value;

      for (let i = 1; i < simulation.length; i++) {
        if (simulation[i].value > peak) {
          peak = simulation[i].value;
        }
        const drawdown = (peak - simulation[i].value) / peak;
        maxDrawdown = Math.max(maxDrawdown, drawdown);
      }

      return maxDrawdown;
    });

    const avgMaxDrawdown =
      maxDrawdowns.reduce((a, b) => a + b, 0) / maxDrawdowns.length;

    // Calcul du CAGR (Compound Annual Growth Rate) moyen
    const cagrs = allSimulations.map((simulation) => {
      const finalValue = simulation[simulation.length - 1].value;
      if (initialValue <= 0 || finalValue <= 0) return 0;
      return Math.pow(finalValue / initialValue, 1 / timeHorizon) - 1;
    });

    const avgCAGR = cagrs.reduce((a, b) => a + b, 0) / cagrs.length;

    // Calcul du ratio de Sortino (variation du Sharpe qui ne p√©nalise que la volatilit√© n√©gative)
    const sortinoRatios = allSimulations.map((simulation) => {
      const returns = [];
      for (let i = 1; i < simulation.length; i++) {
        const yearReturn =
          (simulation[i].value - simulation[i - 1].value) /
          simulation[i - 1].value;
        returns.push(yearReturn);
      }

      if (returns.length === 0) return 0;

      const meanReturn = returns.reduce((a, b) => a + b, 0) / returns.length;
      const negativeReturns = returns.filter((r) => r < 0);

      if (negativeReturns.length === 0) return avgSharpeRatio; // Pas de volatilit√© n√©gative

      const downwardStd = Math.sqrt(
        negativeReturns.reduce((sum, ret) => sum + Math.pow(ret, 2), 0) /
          negativeReturns.length
      );
      const riskFreeRate = 0.02;

      return downwardStd > 0 ? (meanReturn - riskFreeRate) / downwardStd : 0;
    });

    const avgSortinoRatio =
      sortinoRatios.reduce((a, b) => a + b, 0) / sortinoRatios.length;

    return {
      sharpeRatio: avgSharpeRatio,
      maxDrawdown: avgMaxDrawdown,
      cagr: avgCAGR,
      sortinoRatio: avgSortinoRatio,
    };
  };
  const calculateCoastFIRE = (parameters) => {
    const {
      currentAge,
      retirementAge,
      retirementGoal,
      currentSavings,
      inflation,
    } = parameters;

    // Calcul du rendement r√©el moyen pond√©r√© du portefeuille
    const { realEstate, stocks, crypto, cash, other } = parameters;
    const portfolioRealReturn =
      realEstate.allocation * realEstate.return +
      stocks.allocation * stocks.return +
      crypto.allocation * crypto.return +
      cash.allocation * cash.return +
      other.allocation * other.return -
      inflation;

    const yearsToRetirement = retirementAge - currentAge;

    // Formule Coast FIRE
    const coastFIREAmount =
      retirementGoal / Math.pow(1 + portfolioRealReturn, yearsToRetirement);

    // Statut actuel
    const hasReachedCoastFIRE = currentSavings >= coastFIREAmount;
    const gapAmount = coastFIREAmount - currentSavings;

    // Si d√©j√† atteint, calcul de l'√¢ge de retraite possible
    let possibleRetirementAge = retirementAge;
    if (hasReachedCoastFIRE && portfolioRealReturn > 0) {
      const yearsNeeded =
        Math.log(retirementGoal / currentSavings) /
        Math.log(1 + portfolioRealReturn);
      possibleRetirementAge = currentAge + yearsNeeded;
    }

    return {
      coastFIREAmount,
      hasReachedCoastFIRE,
      gapAmount,
      possibleRetirementAge,
      portfolioRealReturn,
      yearsToRetirement,
    };
  };
  //Partie2
  // Simulation Monte Carlo
  // Donn√©es historiques des crises majeures
  const historicalCrises = {
    dotcom2000: {
      name: "Bulle Internet (2000-2002)",
      duration: 24, // mois
      impacts: {
        stocks: -0.45, // -45% sur les actions
        realEstate: -0.1, // -10% sur l'immobilier
        crypto: -0.6, // -60% sur crypto (extrapol√©)
        cash: 0.02, // +2% sur liquidit√©s
        other: -0.2, // -20% sur autres
      },
      recoveryTime: 60, // mois pour r√©cup√©ration
    },
    subprime2008: {
      name: "Crise des Subprimes (2008-2009)",
      duration: 18,
      impacts: {
        stocks: -0.55,
        realEstate: -0.35,
        crypto: -0.7,
        cash: 0.01,
        other: -0.4,
      },
      recoveryTime: 48,
    },
    covid2020: {
      name: "COVID-19 (2020)",
      duration: 6,
      impacts: {
        stocks: -0.35,
        realEstate: -0.15,
        crypto: -0.25,
        cash: 0.0,
        other: -0.25,
      },
      recoveryTime: 18,
    },
  };
  type AllocationMap = {
  realEstate: number;
  stocks: number;
  crypto: number;
  cash: number;
  other: number;
};

  const runSimulation = () => {
    const {
      initialValue,
      timeHorizon,
      monthlyContribution,
      simulations,
      inflation,
      taxRate,
      rebalancingFrequency,
    } = parameters;
    const { realEstate, stocks, crypto, cash, other } = parameters;

    const allSimulations = [];
    const finalValues = [];
    const ruinData = [];
    const timelineDetail = []; // Pour stocker les d√©tails mensuels de la premi√®re simulation

    // Pr√©paration des donn√©es pour la corr√©lation
    const cholesky = choleskyDecomposition(DEFAULT_CORRELATION_MATRIX);

    for (let sim = 0; sim < simulations; sim++) {
      const simulation = [];
      let currentValue = initialValue;
      let ruined = false;
      let ruinYear = null;

      // Allocations actuelles (pour le rebalancement)
      let currentAllocations: AllocationMap = {
        realEstate: currentValue * realEstate.allocation,
        stocks: currentValue * stocks.allocation,
        crypto: currentValue * crypto.allocation,
        cash: currentValue * cash.allocation,
        other: currentValue * other.allocation,
      };

      for (let year = 0; year <= timeHorizon; year++) {
        // G√©n√©ration de l'inflation stochastique pour cette ann√©e
        const yearlyInflation = generateInflationRate(inflation);
        if (year > 0) {
          for (let month = 1; month <= 12; month++) {
            const valueBeforeReturn = currentValue;

            // G√©n√©ration des rendements de base
            const baseReturns = {
              realEstate: realEstate.return / 12,
              stocks: stocks.return / 12,
              crypto: crypto.return / 12,
              cash: cash.return / 12,
              other: other.return / 12,
            };

            // Volatilit√©s mensuelles
            const volatilities = {
              realEstate: realEstate.volatility / Math.sqrt(12),
              stocks: stocks.volatility / Math.sqrt(12),
              crypto: crypto.volatility / Math.sqrt(12),
              cash: cash.volatility / Math.sqrt(12),
              other: other.volatility / Math.sqrt(12),
            };
            let monthlyReturns: AllocationMap;

            // G√©n√©ration des rendements corr√©l√©s
              monthlyReturns = generateCorrelatedReturns(
              baseReturns,
              volatilities,
              cholesky
              ) as AllocationMap;


            // Application des rendements aux allocations actuelles
            currentAllocations.realEstate *= 1 + monthlyReturns.realEstate;
            currentAllocations.stocks *= 1 + monthlyReturns.stocks;
            currentAllocations.crypto *= 1 + monthlyReturns.crypto;
            currentAllocations.cash *= 1 + monthlyReturns.cash;
            currentAllocations.other *= 1 + monthlyReturns.other;
            const valueAfterReturn = Object.values(currentAllocations).reduce(
              (sum, val) => sum + val,
              0
            );
            const monthlyReturn = valueAfterReturn - valueBeforeReturn;

            currentValue = valueAfterReturn;
            // Ajout de la contribution mensuelle (ajust√©e pour l'inflation)
            const totalYears =
              parameters.accumulationYears + parameters.consumptionYears;

            // Retraits (n√©gatif par d√©faut)

            // Ajuster pour l'inflation
            const totalMonths = year * 12 + month;
            const currentPhaseContribution =
              totalMonths < parameters.accumulationYears * 12
                ? parameters.monthlyContribution
                : -parameters.monthlyWithdrawal;

            const inflationAdjustedContribution =
              currentPhaseContribution * Math.pow(1 + yearlyInflation, year);

            currentValue += inflationAdjustedContribution;
            // R√©partition de la contribution mensuelle selon allocation mensuelle d√©finie
            const allocationMap =
              totalMonths < parameters.accumulationYears * 12
                ? parameters.monthlyAllocation
                : parameters.monthlyWithdrawalAllocation;

            currentAllocations.realEstate +=
              inflationAdjustedContribution * allocationMap.realEstate;
            currentAllocations.stocks +=
              inflationAdjustedContribution * allocationMap.stocks;
            currentAllocations.crypto +=
              inflationAdjustedContribution * allocationMap.crypto;
            currentAllocations.cash +=
              inflationAdjustedContribution * allocationMap.cash;
            currentAllocations.other +=
              inflationAdjustedContribution * allocationMap.other;

            // Enregistrement des d√©tails pour la premi√®re simulation uniquement
            if (sim === 0) {
              const totalMonths = year * 12 + month;
              const accumulationMonths = parameters.accumulationYears * 12;

              const phase =
                totalMonths < accumulationMonths
                  ? "accumulation"
                  : "consumption";

              timelineDetail.push({
                year,
                month,
                phase,
                date: `${year}-${month.toString().padStart(2, "0")}`,
                dateLabel: `Ann√©e ${year}, Mois ${month}`,
                valueStart: valueBeforeReturn,
                monthlyReturn: monthlyReturn,
                contribution: inflationAdjustedContribution,
                valueEnd: currentValue,
                returnRate:
                  valueBeforeReturn > 0
                    ? (monthlyReturn / valueBeforeReturn) * 100
                    : 0,
              });
            }

            // Rebalancement si n√©cessaire
            if (
              rebalancingFrequency > 0 &&
              month % rebalancingFrequency === 0
            ) {
              // Calcul des plus-values imposables lors du rebalancement
              const initialTotalValue =
                initialValue * Math.pow(1 + inflation, year);
              let taxableGains = Math.max(0, currentValue - initialTotalValue);

              // Application de la fiscalit√© sur les plus-values
              if (taxableGains > 0) {
                const taxes = taxableGains * taxRate;
                currentValue -= taxes;
              }

              // Rebalancement selon les allocations cibles
              currentAllocations = {
                realEstate: currentValue * realEstate.allocation,
                stocks: currentValue * stocks.allocation,
                crypto: currentValue * crypto.allocation,
                cash: currentValue * cash.allocation,
                other: currentValue * other.allocation,
              };
            }

            // V√©rification de ruine
            if (currentValue <= 0 && !ruined) {
              ruined = true;
              ruinYear = year + month / 12;
            }
          }
        }

        simulation.push({
          year,
          value: Math.max(0, currentValue),
          realValue: Math.max(
            0,
            currentValue / Math.pow(1 + yearlyInflation, year)
          ), // Valeur r√©elle (pouvoir d'achat)
          simulation: sim,
          allocations: { ...currentAllocations }, // üëà
        });
      }

      allSimulations.push(simulation);
      finalValues.push(currentValue);
      ruinData.push({ ruined, ruinYear });
    }

    // Calcul des percentiles pour chaque ann√©e (valeurs nominales et r√©elles)
    const chartData = [];
    for (let year = 0; year <= timeHorizon; year++) {
      const yearValues = allSimulations
        .map((sim) => sim[year].value)
        .sort((a, b) => a - b);
      const yearRealValues = allSimulations
        .map((sim) => sim[year].realValue)
        .sort((a, b) => a - b);

      chartData.push({
        year,
        p10: yearValues[Math.floor(simulations * 0.1)],
        p25: yearValues[Math.floor(simulations * 0.25)],
        p50: yearValues[Math.floor(simulations * 0.5)],
        p75: yearValues[Math.floor(simulations * 0.75)],
        p90: yearValues[Math.floor(simulations * 0.9)],
        mean: yearValues.reduce((a, b) => a + b, 0) / simulations,
        // Valeurs r√©elles (pouvoir d'achat)
        realP10: yearRealValues[Math.floor(simulations * 0.1)],
        realP25: yearRealValues[Math.floor(simulations * 0.25)],
        realP50: yearRealValues[Math.floor(simulations * 0.5)],
        realP75: yearRealValues[Math.floor(simulations * 0.75)],
        realP90: yearRealValues[Math.floor(simulations * 0.9)],
        realMean: yearRealValues.reduce((a, b) => a + b, 0) / simulations,
      });
    }

    // Statistiques finales
    finalValues.sort((a, b) => a - b);
    const finalRealValues = finalValues
      .map((v) => v / Math.pow(1 + inflation, timeHorizon))
      .sort((a, b) => a - b);

    const finalStats = {
      mean: finalValues.reduce((a, b) => a + b, 0) / simulations,
      median: finalValues[Math.floor(simulations * 0.5)],
      p10: finalValues[Math.floor(simulations * 0.1)],
      p90: finalValues[Math.floor(simulations * 0.9)],
      worstCase: finalValues[0],
      bestCase: finalValues[finalValues.length - 1],
      probabilityLoss:
        (finalValues.filter((v) => v < initialValue).length / simulations) *
        100,
      probabilityDoubling:
        (finalValues.filter((v) => v >= initialValue * 2).length /
          simulations) *
        100,
      // Valeurs r√©elles
      realMean: finalRealValues.reduce((a, b) => a + b, 0) / simulations,
      realMedian: finalRealValues[Math.floor(simulations * 0.5)],
      realP10: finalRealValues[Math.floor(simulations * 0.1)],
      realP90: finalRealValues[Math.floor(simulations * 0.9)],
    };

    // Calcul des probabilit√©s de ruine par ann√©e
    const ruinProbData = [];

    for (let year = 1; year <= timeHorizon; year++) {
      const ruinedByYear = (ruinData || []).filter(
        (r): r is { ruined: boolean; ruinYear: number } =>
          r != null && r.ruined && r.ruinYear <= year
      ).length;

      ruinProbData.push({
        year,
        probability: (ruinedByYear / simulations) * 100,
      });
    }

    const advancedAnalytics = calculateAdvancedAnalytics(
      allSimulations,
      parameters
    );
    const coastFIREData = calculateCoastFIRE({
      ...parameters,
      currentSavings: parameters.initialValue,
    });

    // Fonction pour ex√©cuter tous les stress tests
    const runStressTests = () => {
      const stressResults = {};

      Object.keys(historicalCrises).forEach((crisisKey) => {
        const stressParams = applyStressTest(
          crisisKey,
          parameters,
          historicalCrises
        );

        const stressSimulation = runSingleStressSimulation(
          stressParams,
          crisisKey
        );
        stressResults[crisisKey] = {
          ...historicalCrises[crisisKey],
          results: stressSimulation,
        };
      });

      return stressResults;
    };
    // Trouver la simulation qui donne le r√©sultat le plus proche de la m√©diane
    const medianValue = finalStats.median;
    let medianSimIndex = 0;
    let smallestDifference = Math.abs(finalValues[0] - medianValue);

    for (let i = 1; i < finalValues.length; i++) {
      const difference = Math.abs(finalValues[i] - medianValue);
      if (difference < smallestDifference) {
        smallestDifference = difference;
        medianSimIndex = i;
      }
    }

    // R√©cup√©rer les allocations finales de la simulation m√©diane
    const medianSimulation = allSimulations[medianSimIndex];
    const finalTimePoint = medianSimulation[medianSimulation.length - 1];
    const medianFinalValue = finalTimePoint.value;

    // ‚úÖ Vraies allocations finales issues de la simulation m√©diane
    const lastSimStep = medianSimulation[medianSimulation.length - 1];
    const finalAllocationsSim = lastSimStep.allocations; // üëà on va l'ajouter dans la simulation
    console.log("‚û°Ô∏è Allocations finales m√©diane :", finalAllocationsSim);
    console.log("‚û°Ô∏è Valeur finale m√©diane :", lastSimStep.value);

    if (!finalAllocationsSim) {
      console.warn("‚ö†Ô∏è Aucune allocation trouv√©e dans la simulation m√©diane !");
    }

    const totalFinal = Object.values(finalAllocationsSim as AllocationMap).reduce(
  (a, b) => a + b,
  0
);

    const finalAllocPercentages = Object.fromEntries(
      Object.entries(finalAllocationsSim).map(([k, v]) => [k, (v as number) / totalFinal])

    );

    // üîÅ Met √† jour ce qui est affich√©
    setFinalAllocations(finalAllocPercentages);

    setRuinProbability(ruinProbData);
    setResults(chartData);
    setStats({
      ...finalStats,
      advancedAnalytics, // üëà Ajoutez cette ligne √† votre objet finalStats
      coastFIRE: coastFIREData, //
    });
    setTimelineData(timelineDetail);
  };

  useEffect(() => {
    runSimulation();
  }, [parameters]);
  const executeStressTests = async () => {
    setIsStressTestLoading(true);
    setShowStressTest(true);

    setTimeout(() => {
      const stressResults = {};
      Object.keys(historicalCrises).forEach((crisisKey) => {
        const stressParams = applyStressTest(
          crisisKey,
          parameters,
          historicalCrises
        );

        const stressSimulation = runSingleStressSimulation(
          stressParams,
          crisisKey
        );
        stressResults[crisisKey] = {
          ...historicalCrises[crisisKey],
          results: stressSimulation,
        };
      });

      setStressTestResults(stressResults);
      setIsStressTestLoading(false);
    }, 500);
  };

  // Donn√©es pour le graphique en secteurs
  const pieData = [
    {
      name: "üè† Immobilier",
      value: parameters.realEstate.allocation * 100,
      color: "#8B5CF6",
    },
    {
      name: "üìà Actions",
      value: parameters.stocks.allocation * 100,
      color: "#3B82F6",
    },
    {
      name: "‚Çø Crypto",
      value: parameters.crypto.allocation * 100,
      color: "#F59E0B",
    },
    {
      name: "üí∞ Liquidit√©s",
      value: parameters.cash.allocation * 100,
      color: "#10B981",
    },
    {
      name: "üîß Autres",
      value: parameters.other.allocation * 100,
      color: "#EF4444",
    },
  ].filter((item) => item.value > 0);

  const formatEuro = (value) => {
    return new Intl.NumberFormat("fr-FR", {
      style: "currency",
      currency: "EUR",
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(value);
  };
  if (!isAuthenticated) {
    return (
      <AuthGate
        onAuthenticated={(userData) => {
          setCurrentUser(userData);
          setIsAuthenticated(true);
        }}
      />
    );
  }
  //Partie3
  return (
    <div className="max-w-6xl mx-auto p-6 bg-gray-50 min-h-screen">
      <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
        <h1 className="text-3xl font-bold text-gray-800 mb-2">
          Simulation Monte Carlo - √âvolution Patrimoine
        </h1>
        <p className="text-gray-600 mb-6">
          Analyse probabiliste de l'√©volution de votre patrimoine sur{" "}
          {parameters.timeHorizon} ans
        </p>
        <div className="mb-6">
          <h3 className="text-lg font-semibold text-gray-700 mb-3">
            Sc√©narios Pr√©d√©finis
          </h3>
          <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
            {Object.entries(presetScenarios).map(([key, scenario]) => (
              <button
                key={key}
                onClick={() =>
                  applyPresetScenario(
                    key as "conservateur" | "equilibre" | "agressif"
                  )
                }
                className="p-4 border-2 border-gray-200 rounded-lg hover:border-blue-500 hover:bg-blue-50 transition-all duration-200 text-left group"
              >
                <div className="font-semibold text-gray-800 mb-1">
                  {scenario.name}
                </div>
                <div className="text-sm text-gray-600 mb-2">
                  {scenario.description}
                </div>
                <div className="text-xs text-gray-500">
                  Immobilier:{" "}
                  {(scenario.realEstate.allocation * 100).toFixed(0)}% ‚Ä¢
                  Actions: {(scenario.stocks.allocation * 100).toFixed(0)}% ‚Ä¢
                  Crypto: {(scenario.crypto.allocation * 100).toFixed(0)}%
                </div>
              </button>
            ))}
          </div>
        </div>
        {/* Section Sauvegarde et Export */}
        <div className="mb-6">
          <div className="flex flex-wrap items-center justify-between gap-4 mb-4">
            <h3 className="text-lg font-semibold text-gray-700">
              Sauvegarde & Export
            </h3>
            <div className="flex gap-2">
              <button
                onClick={() => setShowSaveDialog(true)}
                className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors duration-200 flex items-center gap-2"
              >
                üíæ Sauvegarder
              </button>
              <button
                onClick={exportResults}
                className="px-4 py-2 bg-green-600 text-white rounded-lg hover:bg-green-700 transition-colors duration-200 flex items-center gap-2"
              >
                üì§ Exporter
              </button>
            </div>
          </div>

          {/* Configurations sauvegard√©es */}
          {savedConfigs.length > 0 && (
            <div className="bg-gray-50 rounded-lg p-4">
              <h4 className="font-medium text-gray-700 mb-3">
                Configurations sauvegard√©es
              </h4>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                {savedConfigs.map((config) => (
                  <div
                    key={config.id}
                    className="bg-white p-3 rounded-lg border border-gray-200 group hover:border-blue-300 transition-colors"
                  >
                    <div className="flex items-start justify-between mb-2">
                      <div className="flex-1">
                        <h5 className="font-medium text-gray-800 text-sm">
                          {config.name}
                        </h5>
                        <p className="text-xs text-gray-500">{config.date}</p>
                      </div>
                      <button
                        onClick={() => deleteConfiguration(config.id)}
                        className="opacity-0 group-hover:opacity-100 text-red-500 hover:text-red-700 transition-all duration-200 text-sm"
                        title="Supprimer"
                      >
                        ‚úï
                      </button>
                    </div>
                    <div className="text-xs text-gray-600 mb-2">
                      {formatEuro(config.parameters.initialValue)} ‚Ä¢{" "}
                      {config.parameters.timeHorizon}ans ‚Ä¢{" "}
                      {formatEuro(config.parameters.monthlyContribution)}/mois
                    </div>
                    <button
                      onClick={() => loadConfiguration(config)}
                      className="w-full px-3 py-1 text-xs bg-blue-50 text-blue-600 rounded hover:bg-blue-100 transition-colors duration-200"
                    >
                      Charger
                    </button>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        {/* Dialog de sauvegarde */}
        {showSaveDialog && (
          <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
            <div className="bg-white rounded-lg p-6 w-full max-w-md mx-4">
              <h3 className="text-lg font-semibold text-gray-800 mb-4">
                Sauvegarder la configuration
              </h3>
              <div className="mb-4">
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Nom de la configuration
                </label>
                <input
                  type="text"
                  value={configName}
                  onChange={(e) => setConfigName(e.target.value)}
                  placeholder="Ex: Portfolio Agressif 2025"
                  className="w-full p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
                  onKeyPress={(e) => e.key === "Enter" && saveConfiguration()}
                />
              </div>
              <div className="flex justify-end gap-3">
                <button
                  onClick={() => {
                    setShowSaveDialog(false);
                    setConfigName("");
                  }}
                  className="px-4 py-2 text-gray-600 hover:text-gray-800 transition-colors duration-200"
                >
                  Annuler
                </button>
                <button
                  onClick={saveConfiguration}
                  disabled={!configName.trim()}
                  className="px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:bg-gray-300 disabled:cursor-not-allowed transition-colors duration-200"
                >
                  Sauvegarder
                </button>
              </div>
            </div>
          </div>
        )}

        {/* Onglets de navigation */}
        <div className="flex space-x-4 mb-6 border-b">
          <button
            onClick={() => setActiveTab("evolution")}
            className={`px-4 py-2 font-medium ${
              activeTab === "evolution"
                ? "border-b-2 border-blue-500 text-blue-600"
                : "text-gray-600"
            }`}
          >
            üìà √âvolution
          </button>
          <button
            onClick={() => setActiveTab("allocation")}
            className={`px-4 py-2 font-medium ${
              activeTab === "allocation"
                ? "border-b-2 border-blue-500 text-blue-600"
                : "text-gray-600"
            }`}
          >
            ü•ß R√©partition
          </button>
          <button
            onClick={() => setActiveTab("risk")}
            className={`px-4 py-2 font-medium ${
              activeTab === "risk"
                ? "border-b-2 border-blue-500 text-blue-600"
                : "text-gray-600"
            }`}
          >
            ‚ö†Ô∏è Analyse de Risque
          </button>
          <button
            onClick={() => setActiveTab("timeline")}
            className={`px-4 py-2 font-medium ${
              activeTab === "timeline"
                ? "border-b-2 border-blue-500 text-blue-600"
                : "text-gray-600"
            }`}
          >
            üìÖ Timeline
          </button>
          <button
            onClick={() => setActiveTab("config")}
            className={`px-4 py-2 font-medium ${
              activeTab === "config"
                ? "border-b-2 border-blue-500 text-blue-600"
                : "text-gray-600"
            }`}
          >
            ‚öôÔ∏è Configuration
          </button>
          <button
            onClick={() => setActiveTab("stress")}
            className={`px-4 py-2 font-medium ${
              activeTab === "stress"
                ? "border-b-2 border-blue-500 text-blue-600"
                : "text-gray-600"
            }`}
          >
            üî• Stress Tests
          </button>
        </div>

        {/* Param√®tres g√©n√©raux */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6 p-4 bg-gray-50 rounded-lg">
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Patrimoine initial (‚Ç¨)
            </label>
            <input
              type="number"
              value={parameters.initialValue}
              onChange={(e) =>
                setParameters({
                  ...parameters,
                  initialValue: parseInt(e.target.value),
                })
              }
              className="w-full p-2 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Horizon (ann√©es)
            </label>
            <input
              type="number"
              min={0}
              value={parameters.timeHorizon}
              onChange={(e) => {
                const newValue = e.target.value;
                setParameters({
                  ...parameters,
                  timeHorizon: newValue === "" ? 0 : parseInt(newValue, 10),
                });
              }}
              className="w-full p-2 border border-gray-300 rounded-md"
            />
          </div>
          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Phase d'accumulation (ann√©es)
            </label>
            <input
              type="number"
              value={parameters.accumulationYears}
              onChange={(e) =>
                setParameters({
                  ...parameters,
                  accumulationYears: parseInt(e.target.value),
                })
              }
              className="w-full p-2 border border-gray-300 rounded-md"
            />
          </div>

          <div>
            <label className="block text-sm font-medium text-gray-700 mb-2">
              Phase de consommation (ann√©es)
            </label>
            <input
              type="number"
              value={parameters.consumptionYears}
              onChange={(e) =>
                setParameters({
                  ...parameters,
                  consumptionYears: parseInt(e.target.value),
                })
              }
              className="w-full p-2 border border-gray-300 rounded-md"
            />
          </div>
          {parameters.accumulationYears + parameters.consumptionYears !==
            parameters.timeHorizon && (
            <div className="text-sm text-red-600 col-span-full">
              ‚ö†Ô∏è La somme des ann√©es d'accumulation (
              {parameters.accumulationYears}) et de consommation (
              {parameters.consumptionYears}) doit √™tre √©gale √† l'horizon (
              {parameters.timeHorizon} ans).
            </div>
          )}
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            {/* √âpargne mensuelle */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                √âpargne mensuelle (‚Ç¨)
              </label>
              <input
                type="number"
                value={parameters.monthlyContribution}
                onChange={(e) =>
                  setParameters({
                    ...parameters,
                    monthlyContribution: parseInt(e.target.value),
                  })
                }
                className="w-full p-2 border border-gray-300 rounded-md"
                placeholder="Ex: 2700 pour √©pargner, -1500 pour puiser dans le patrimoine"
              />
            </div>

            {/* Retrait mensuel */}
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-2">
                Retrait mensuel (‚Ç¨)
              </label>
              <input
                type="number"
                value={parameters.monthlyWithdrawal}
                onChange={(e) =>
                  setParameters({
                    ...parameters,
                    monthlyWithdrawal: parseFloat(e.target.value),
                  })
                }
                className="w-full p-2 border border-gray-300 rounded-md"
                placeholder="Ex: 1500 pour consommer"
              />
            </div>
          </div>
        </div>

        {/* Contenu des onglets */}
        {activeTab === "timeline" && (
          <div>
            <h2 className="text-xl font-semibold mb-4">
              Timeline D√©taill√©e - Retraits vs Rendements
            </h2>
            <div className="mb-4 p-4 bg-blue-50 rounded-lg">
              <p className="text-sm text-blue-700">
                üìä Cette timeline montre l'√©volution mois par mois bas√©e sur la
                premi√®re simulation. Elle permet de visualiser les rendements
                mensuels et les contributions/retraits.
              </p>
            </div>

            <div className="w-full">
              {/* Graphique Timeline */}
              <div className="bg-white p-6 rounded-lg shadow-sm">
                <h3 className="text-lg font-medium mb-4">
                  √âvolution Mensuelle du Patrimoine
                </h3>
                <div className="h-80">
                  <ResponsiveContainer width="100%" height="100%">
                    <>
                    <LineChart data={timelineData}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis
                        dataKey="date"
                        tickFormatter={(value) => `A${value.split("-")[0]}`}
                        interval="preserveStartEnd"
                      />
                      <YAxis tickFormatter={formatEuro} />
                      <Tooltip
                        labelFormatter={(value) => {
                          const item = timelineData.find(
                            (t) => t.date === value
                          );
                          return item ? item.dateLabel : value;
                        }}
                        formatter={(value, name) => {
                          if (name === "valueEnd")
                            return [formatEuro(value), "Patrimoine"];
                          return [formatEuro(value), name];
                        }}
                      />
                      {["accumulation", "consumption"].map((phaseKey) => (
                        <Line
                          key={phaseKey}
                          type="monotone"
                          dataKey={(d) =>
                            d.phase === phaseKey ? d.valueEnd : null
                          }
                          stroke={
                            phaseKey === "accumulation" ? "#10B981" : "#EF4444"
                          } // vert ou rouge
                          strokeWidth={2}
                          dot={false}
                          name={
                            phaseKey === "accumulation"
                              ? "Accumulation"
                              : "Consommation"
                          }
                          connectNulls
                        />
                      ))}
                    </LineChart>
                    <div className="flex gap-4 mt-2 text-sm text-gray-600">
                      <div className="flex items-center gap-1">
                        <span className="inline-block w-4 h-2 bg-green-500 rounded-sm"></span>
                        Accumulation
                      </div>
                      <div className="flex items-center gap-1">
                        <span className="inline-block w-4 h-2 bg-red-500 rounded-sm"></span>
                        Consommation
                      </div>
                    </div>
                       </>
                  </ResponsiveContainer>
                </div>
              </div>

              <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
                <h2 className="text-2xl font-bold text-gray-800 mb-4">
                  üìä Analyses Sophistiqu√©es
                </h2>

                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
                  <div className="bg-gradient-to-br from-blue-50 to-blue-100 p-4 rounded-lg border border-blue-200">
                    <div className="flex items-center mb-2">
                      <div className="w-3 h-3 bg-blue-500 rounded-full mr-2"></div>

                      <h3 className="font-semibold text-gray-700">
                        Ratio de Sharpe
                      </h3>
                    </div>
                    //Partie3b
                    <div className="text-2xl font-bold text-blue-600">
                      {(stats as any).advancedAnalytics &&
                      (stats as any).advancedAnalytics.sharpeRatio !== undefined
                        ? (stats as any).advancedAnalytics.sharpeRatio.toFixed(
                            2
                          )
                        : "N/A"}
                    </div>
                    <div className="text-sm text-gray-600 mt-1">
                      {stats.advancedAnalytics?.sharpeRatio > 1
                        ? "Excellent"
                        : stats.advancedAnalytics?.sharpeRatio > 0.5
                        ? "Bon"
                        : stats.advancedAnalytics?.sharpeRatio > 0
                        ? "Acceptable"
                        : "Faible"}
                    </div>
                  </div>

                  <div className="bg-gradient-to-br from-red-50 to-red-100 p-4 rounded-lg border border-red-200">
                    <div className="flex items-center mb-2">
                      <div className="w-3 h-3 bg-red-500 rounded-full mr-2"></div>
                      <h3 className="font-semibold text-gray-700">
                        Drawdown Max
                      </h3>
                    </div>
                    <div className="text-2xl font-bold text-red-600">
                      -
                      {(stats.advancedAnalytics?.maxDrawdown * 100)?.toFixed(
                        1
                      ) || "N/A"}
                      %
                    </div>
                    <div className="text-sm text-gray-600 mt-1">
                      Perte maximale
                    </div>
                  </div>

                  <div className="bg-gradient-to-br from-green-50 to-green-100 p-4 rounded-lg border border-green-200">
                    <div className="flex items-center mb-2">
                      <div className="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
                      <h3 className="font-semibold text-gray-700">
                        CAGR Moyen
                      </h3>
                    </div>
                    <div className="text-2xl font-bold text-green-600">
                      {(stats.advancedAnalytics?.cagr * 100)?.toFixed(1) ||
                        "N/A"}
                      %
                    </div>
                    <div className="text-sm text-gray-600 mt-1">
                      Croissance annuelle
                    </div>
                  </div>

                  <div className="bg-gradient-to-br from-purple-50 to-purple-100 p-4 rounded-lg border border-purple-200">
                    <div className="flex items-center mb-2">
                      <div className="w-3 h-3 bg-purple-500 rounded-full mr-2"></div>
                      <h3 className="font-semibold text-gray-700">
                        Ratio de Sortino
                      </h3>
                    </div>
                    <div className="text-2xl font-bold text-purple-600">
                      {stats.advancedAnalytics?.sortinoRatio?.toFixed(2) ||
                        "N/A"}
                    </div>
                    <div className="text-sm text-gray-600 mt-1">
                      Risque ajust√©
                    </div>
                  </div>
                </div>

                <div className="mt-4 p-3 bg-gray-50 rounded-lg">
                  <h4 className="font-semibold text-gray-700 mb-2">
                    üí° Interpr√©tation
                  </h4>
                  <div className="text-sm text-gray-600 space-y-1">
                    <p>
                      <strong>Sharpe :</strong> Rendement ajust√© du risque (
                      {">"}1 = excellent, {">"}0.5 = bon)
                    </p>

                    <p>
                      <strong>Drawdown :</strong> Perte maximale depuis un pic
                      (plus faible = mieux)
                    </p>
                    <p>
                      <strong>CAGR :</strong> Taux de croissance annuel compos√©
                      moyen
                    </p>
                    <p>
                      <strong>Sortino :</strong> Comme Sharpe mais p√©nalise
                      uniquement la volatilit√© n√©gative
                    </p>
                  </div>
                </div>
              </div>
              {/* Section Coast FIRE */}
              <div className="bg-white rounded-lg shadow-lg p-6 mb-6">
                <h2 className="text-2xl font-bold text-gray-800 mb-4">
                  üèñÔ∏è Analyse Coast FIRE
                </h2>

                {stats.coastFIRE && (
                  <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4 mb-6">
                    <div
                      className={`p-4 rounded-lg border-2 ${
                        stats.coastFIRE.hasReachedCoastFIRE
                          ? "bg-gradient-to-br from-green-50 to-green-100 border-green-300"
                          : "bg-gradient-to-br from-orange-50 to-orange-100 border-orange-300"
                      }`}
                    >
                      <div className="flex items-center mb-2">
                        <div
                          className={`w-3 h-3 rounded-full mr-2 ${
                            stats.coastFIRE.hasReachedCoastFIRE
                              ? "bg-green-500"
                              : "bg-orange-500"
                          }`}
                        ></div>
                        <h3 className="font-semibold text-gray-700">
                          Seuil Coast FIRE
                        </h3>
                      </div>
                      <div
                        className={`text-2xl font-bold ${
                          stats.coastFIRE.hasReachedCoastFIRE
                            ? "text-green-600"
                            : "text-orange-600"
                        }`}
                      >
                        {formatEuro(stats.coastFIRE.coastFIREAmount)}
                      </div>
                      <div className="text-sm text-gray-600 mt-1">
                        Pour {formatEuro(parameters.retirementGoal)} √†{" "}
                        {parameters.retirementAge} ans
                      </div>
                    </div>

                    <div
                      className={`p-4 rounded-lg border-2 ${
                        stats.coastFIRE.hasReachedCoastFIRE
                          ? "bg-gradient-to-br from-green-50 to-green-100 border-green-300"
                          : "bg-gradient-to-br from-red-50 to-red-100 border-red-300"
                      }`}
                    >
                      <div className="flex items-center mb-2">
                        <div
                          className={`w-3 h-3 rounded-full mr-2 ${
                            stats.coastFIRE.hasReachedCoastFIRE
                              ? "bg-green-500"
                              : "bg-red-500"
                          }`}
                        ></div>
                        <h3 className="font-semibold text-gray-700">Statut</h3>
                      </div>
                      <div
                        className={`text-xl font-bold ${
                          stats.coastFIRE.hasReachedCoastFIRE
                            ? "text-green-600"
                            : "text-red-600"
                        }`}
                      >
                        {stats.coastFIRE.hasReachedCoastFIRE
                          ? "‚úÖ Atteint"
                          : "‚ùå Non atteint"}
                      </div>
                      <div className="text-sm text-gray-600 mt-1">
                        {stats.coastFIRE.hasReachedCoastFIRE
                          ? "Vous pouvez arr√™ter d'√©pargner"
                          : "Continuez √† √©pargner"}
                      </div>
                    </div>

                    <div className="bg-gradient-to-br from-blue-50 to-blue-100 p-4 rounded-lg border border-blue-200">
                      <div className="flex items-center mb-2">
                        <div className="w-3 h-3 bg-blue-500 rounded-full mr-2"></div>
                        <h3 className="font-semibold text-gray-700">
                          {stats.coastFIRE.hasReachedCoastFIRE
                            ? "Surplus"
                            : "√âcart"}
                        </h3>
                      </div>
                      <div
                        className={`text-2xl font-bold ${
                          stats.coastFIRE.hasReachedCoastFIRE
                            ? "text-green-600"
                            : "text-blue-600"
                        }`}
                      >
                        {stats.coastFIRE.hasReachedCoastFIRE ? "+" : ""}
                        {formatEuro(Math.abs(stats.coastFIRE.gapAmount))}
                      </div>
                      <div className="text-sm text-gray-600 mt-1">
                        {stats.coastFIRE.hasReachedCoastFIRE
                          ? "Au-dessus du seuil"
                          : "Manquant pour Coast FIRE"}
                      </div>
                    </div>

                    <div className="bg-gradient-to-br from-purple-50 to-purple-100 p-4 rounded-lg border border-purple-200">
                      <div className="flex items-center mb-2">
                        <div className="w-3 h-3 bg-purple-500 rounded-full mr-2"></div>
                        <h3 className="font-semibold text-gray-700">
                          Retraite possible
                        </h3>
                      </div>
                      <div className="text-2xl font-bold text-purple-600">
                        {stats.coastFIRE.possibleRetirementAge.toFixed(0)} ans
                      </div>
                      <div className="text-sm text-gray-600 mt-1">
                        {stats.coastFIRE.hasReachedCoastFIRE
                          ? `${(
                              parameters.retirementAge -
                              stats.coastFIRE.possibleRetirementAge
                            ).toFixed(0)} ans plus t√¥t`
                          : "√Çge de retraite cible"}
                      </div>
                    </div>
                  </div>
                )}

                <div className="p-4 bg-gray-50 rounded-lg">
                  <h4 className="font-semibold text-gray-700 mb-2">
                    üßÆ Param√®tres Coast FIRE
                  </h4>
                  <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-4">
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        √Çge actuel
                      </label>
                      <input
                        type="number"
                        value={parameters.currentAge}
                        onChange={(e) =>
                          setParameters({
                            ...parameters,
                            currentAge: parseInt(e.target.value) || 30,
                          })
                        }
                        className="w-full p-2 border border-gray-300 rounded-md text-sm"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        √Çge retraite
                      </label>
                      <input
                        type="number"
                        value={parameters.retirementAge}
                        onChange={(e) =>
                          setParameters({
                            ...parameters,
                            retirementAge: parseInt(e.target.value) || 65,
                          })
                        }
                        className="w-full p-2 border border-gray-300 rounded-md text-sm"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Objectif retraite (‚Ç¨)
                      </label>
                      <input
                        type="number"
                        value={parameters.retirementGoal}
                        onChange={(e) =>
                          setParameters({
                            ...parameters,
                            retirementGoal: parseInt(e.target.value) || 1000000,
                          })
                        }
                        className="w-full p-2 border border-gray-300 rounded-md text-sm"
                      />
                    </div>
                    <div>
                      <label className="block text-sm font-medium text-gray-700 mb-1">
                        Rendement r√©el
                      </label>
                      <div className="w-full p-2 border border-gray-200 rounded-md text-sm bg-gray-100">
                        {(stats.coastFIRE?.portfolioRealReturn * 100)?.toFixed(
                          2
                        ) || "0.00"}
                        %
                      </div>
                      <div className="text-xs text-gray-500 mt-1">
                        Calcul√© automatiquement
                      </div>
                    </div>
                  </div>

                  <div className="text-sm text-gray-600 space-y-1">
                    <p>
                      <strong>üí° Coast FIRE :</strong> Le montant n√©cessaire
                      aujourd'hui pour atteindre votre objectif retraite sans
                      √©pargner davantage.
                    </p>
                    <p>
                      <strong>üéØ Formule :</strong> Objectif Retraite √∑ (1 +
                      Rendement R√©el)^Ann√©es =
                      {formatEuro(parameters.retirementGoal)} √∑ (1 +{" "}
                      {(
                        (stats.coastFIRE?.portfolioRealReturn || 0) * 100
                      ).toFixed(2)}
                      %)^{parameters.retirementAge - parameters.currentAge}
                    </p>
                    {stats.coastFIRE?.hasReachedCoastFIRE && (
                      <p className="text-green-600 font-medium">
                        üéâ F√©licitations ! Vous avez atteint Coast FIRE. Vous
                        pouvez r√©duire votre √©pargne ou partir plus t√¥t √† la
                        retraite.
                      </p>
                    )}
                  </div>
                </div>
              </div>
              {/* Graphique Rendements vs Contributions */}
            </div>

            {/* Statistiques d√©taill√©es */}
            <div className="mt-6 grid grid-cols-1 md:grid-cols-4 gap-4">
              <div className="bg-green-50 p-4 rounded-lg">
                <div className="text-lg font-bold text-green-600">
                  {formatEuro(
                    timelineData.reduce((sum, t) => sum + t.monthlyReturn, 0)
                  )}
                </div>
                <div className="text-sm text-gray-600">Rendements totaux</div>
                <div className="text-xs text-green-500 mt-1">
                  Sur {parameters.timeHorizon} ans
                </div>
              </div>

              <div className="bg-blue-50 p-4 rounded-lg">
                <div className="text-lg font-bold text-blue-600">
                  {formatEuro(
                    timelineData.reduce((sum, t) => sum + t.contribution, 0)
                  )}
                </div>
                <div className="text-sm text-gray-600">
                  {parameters.monthlyContribution >= 0
                    ? "√âpargne totale"
                    : "Retraits totaux"}
                </div>
                <div className="text-xs text-blue-500 mt-1">
                  {parameters.monthlyContribution >= 0
                    ? "Contributions"
                    : "Pr√©l√®vements"}
                </div>
              </div>

              <div className="bg-purple-50 p-4 rounded-lg">
                <div className="text-lg font-bold text-purple-600">
                  {timelineData.length > 0
                    ? (
                        timelineData.reduce((sum, t) => sum + t.returnRate, 0) /
                        timelineData.length
                      ).toFixed(2) + "%"
                    : "0%"}
                </div>
                <div className="text-sm text-gray-600">
                  Rendement moyen mensuel
                </div>
                <div className="text-xs text-purple-500 mt-1">
                  Base premi√®re simulation
                </div>
              </div>

              <div className="bg-orange-50 p-4 rounded-lg">
                <div className="text-lg font-bold text-orange-600">
                  {timelineData.length > 0
                    ? Math.max(
                        ...timelineData.map((t) => Math.abs(t.returnRate))
                      ).toFixed(2) + "%"
                    : "0%"}
                </div>
                <div className="text-sm text-gray-600">
                  Plus forte variation
                </div>
                <div className="text-xs text-orange-500 mt-1">
                  Mensuelle (absolue)
                </div>
              </div>
            </div>

            {/* Tableau d√©taill√© des derniers mois */}
            <div className="mt-6 bg-white rounded-lg shadow-sm overflow-hidden">
              <div className="px-6 py-4 border-b border-gray-200">
                <h3 className="text-lg font-medium">
                  D√©tail des 12 Derniers Mois
                </h3>
              </div>
              <div className="overflow-x-auto">
                <table className="min-w-full divide-y divide-gray-200">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        P√©riode
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Patrimoine D√©but
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Rendement
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        {parameters.monthlyContribution >= 0
                          ? "√âpargne"
                          : "Retrait"}
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        Patrimoine Fin
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        % Variation
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {timelineData.slice(-12).map((item, index) => (
                      <tr
                        key={index}
                        className={index % 2 === 0 ? "bg-white" : "bg-gray-50"}
                      >
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {item.dateLabel}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                          {formatEuro(item.valueStart)}
                        </td>
                        <td
                          className={`px-6 py-4 whitespace-nowrap text-sm font-medium ${
                            item.monthlyReturn >= 0
                              ? "text-green-600"
                              : "text-red-600"
                          }`}
                        >
                          {item.monthlyReturn >= 0 ? "+" : ""}
                          {formatEuro(item.monthlyReturn)}
                        </td>
                        <td
                          className={`px-6 py-4 whitespace-nowrap text-sm ${
                            parameters.monthlyContribution >= 0
                              ? "text-blue-600"
                              : "text-red-600"
                          }`}
                        >
                          {parameters.monthlyContribution >= 0 ? "+" : ""}
                          {formatEuro(item.contribution)}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap text-sm font-medium text-gray-900">
                          {formatEuro(item.valueEnd)}
                        </td>
                        <td
                          className={`px-6 py-4 whitespace-nowrap text-sm font-medium ${
                            item.returnRate >= 0
                              ? "text-green-600"
                              : "text-red-600"
                          }`}
                        >
                          {item.returnRate >= 0 ? "+" : ""}
                          {item.returnRate.toFixed(2)}%
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              </div>
            </div>
          </div>
        )}
        {activeTab === "stress" && (
          <div>
            <div className="bg-white rounded-lg shadow-sm p-6 mb-6">
              <h2 className="text-xl font-semibold mb-4 text-gray-800">
                üî• Tests de R√©sistance aux Crises Historiques
              </h2>
              <p className="text-gray-600 mb-6">
                Analysez comment votre portefeuille aurait r√©sist√© aux grandes
                crises financi√®res du pass√©.
              </p>

              <div className="flex justify-center mb-6">
                <button
                  onClick={executeStressTests}
                  disabled={isStressTestLoading}
                  className="px-6 py-3 bg-red-600 text-white rounded-lg hover:bg-red-700 disabled:bg-gray-400 transition-colors duration-200 flex items-center gap-2"
                >
                  {isStressTestLoading
                    ? "‚è≥ Calcul en cours..."
                    : "üî• Lancer les Stress Tests"}
                </button>
              </div>

              {showStressTest && Object.keys(stressTestResults).length > 0 && (
                <div className="space-y-6">
                  {Object.entries(stressTestResults).map(
                    ([crisisKey, crisis]) => {
                      const typedCrisis = crisis as { name: string };

                      return (
                      <div
                        key={crisisKey}
                        className="border border-red-200 rounded-lg p-6 bg-red-50"
                      >
                        <h3 className="text-lg font-semibold text-red-800 mb-2">
                          {crisis.name}
                        </h3>
                        <div className="grid grid-cols-1 md:grid-cols-2 gap-4 mb-4">
                          <div className="bg-white p-4 rounded-lg">
                            <h4 className="font-medium text-gray-700 mb-2">
                              Impacts de la crise
                            </h4>
                            <div className="space-y-1 text-sm">
                              {Object.entries(crisis.impacts).map(
                                ([asset, impact]) => (
                                  <div
                                    key={asset}
                                    className="flex justify-between"
                                  >
                                    <span className="capitalize">
                                      {asset === "realEstate"
                                        ? "Immobilier"
                                        : asset === "stocks"
                                        ? "Actions"
                                        : asset === "cash"
                                        ? "Liquidit√©s"
                                        : asset}
                                      :
                                    </span>
                                    <span
                                      className={
                                        impact < 0
                                          ? "text-red-600"
                                          : "text-green-600"
                                      }
                                    >
                                      {(impact * 100).toFixed(1)}%
                                    </span>
                                  </div>
                                )
                              )}
                            </div>
                          </div>
                          <div className="bg-white p-4 rounded-lg">
                            <h4 className="font-medium text-gray-700 mb-2">
                              Caract√©ristiques
                            </h4>
                            <div className="space-y-1 text-sm text-gray-600">
                              <div>Dur√©e: {crisis.duration} mois</div>
                              <div>
                                R√©cup√©ration: {crisis.recoveryTime} mois
                              </div>
                            </div>
                          </div>
                        </div>

                        <div className="bg-white rounded-lg p-4">
                          <h4 className="font-medium text-gray-700 mb-3">
                            R√©sultats de simulation
                          </h4>
                          <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
                            <div className="text-center">
                              <div className="text-gray-500">
                                Valeur moyenne
                              </div>
                              <div className="font-semibold text-lg">
                                {formatEuro(crisis.results.mean)}
                              </div>
                            </div>
                            <div className="text-center">
                              <div className="text-gray-500">M√©diane</div>
                              <div className="font-semibold text-lg">
                                {formatEuro(crisis.results.median)}
                              </div>
                            </div>
                            <div className="text-center">
                              <div className="text-gray-500">Pire cas</div>
                              <div className="font-semibold text-lg text-red-600">
                                {formatEuro(crisis.results.worstCase)}
                              </div>
                            </div>
                            <div className="text-center">
                              <div className="text-gray-500">
                                Prob. de perte
                              </div>
                              <div className="font-semibold text-lg text-red-600">
                                {crisis.results.lossProbability.toFixed(1)}%
                              </div>
                            </div>
                          </div>
                        </div>
                      </div>
                    )
                  )}
                </div>
              )}
            </div>
          </div>
        )}
        {activeTab === "config" && (
          <div>
            <h2 className="text-xl font-semibold mb-4">
              Configuration des Classes d'Actifs
            </h2>
            {/* R√©partition des versements mensuels */}
            <div className="mb-6 bg-white rounded-lg p-4 shadow-sm">
              <h3 className="text-lg font-semibold text-gray-700 mb-4">
                üîÑ R√©partition des versements mensuels
              </h3>
              <p className="text-sm text-gray-500 mb-4">
                Cette r√©partition s'applique uniquement √† l'√©pargne mensuelle.
                Elle peut √™tre diff√©rente de celle du patrimoine initial.
              </p>
              <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
                {["realEstate", "stocks", "crypto", "cash", "other"].map(
                  (key) => (
                    <div key={key}>
                      <label className="block text-xs font-medium text-gray-600 mb-1">
                        {key === "realEstate"
                          ? "üè† Immo"
                          : key === "stocks"
                          ? "üìà Actions"
                          : key === "crypto"
                          ? "‚Çø Crypto"
                          : key === "cash"
                          ? "üí∞ Liquidit√©s"
                          : "üîß Autres"}
                      </label>
                      <input
                        type="number"
                        min={0}
                        max={100}
                        value={Math.round(
                          parameters.monthlyAllocation[key] * 100
                        )}
                        onChange={(e) => {
                          const updated = {
                            ...parameters.monthlyAllocation,
                            [key]: parseFloat(e.target.value) / 100,
                          };
                          setParameters({
                            ...parameters,
                            monthlyAllocation: updated,
                          });
                        }}
                        className="w-full p-2 border border-gray-300 rounded-md text-sm"
                      />
                    </div>
                  )
                )}
              </div>
              <div className="mt-2 text-sm text-gray-500">
                Total:{" "}
                <span
                  className={`font-semibold ${
                    Math.abs(
                      Object.values(parameters.monthlyAllocation).reduce(
                        (a, b) => a + b,
                        0
                      ) - 1
                    ) < 0.01
                      ? "text-green-600"
                      : "text-red-600"
                  }`}
                >
                  {Math.round(
                    Object.values(parameters.monthlyAllocation).reduce(
                      (a, b) => a + b,
                      0
                    ) * 100
                  )}
                  %
                </span>
                {Math.abs(
                  Object.values(parameters.monthlyAllocation).reduce(
                    (a, b) => a + b,
                    0
                  ) - 1
                ) >= 0.01 && (
                  <div className="text-xs text-red-600">
                    ‚ö†Ô∏è Le total doit √™tre √©gal √† 100%
                  </div>
                )}
              </div>
            </div>
            {/* R√©partition des retraits mensuels */}
            <div className="mb-6 bg-white rounded-lg p-4 shadow-sm mt-6">
              <h3 className="text-lg font-semibold text-gray-700 mb-4">
                üí∏ R√©partition des retraits mensuels
              </h3>
              <p className="text-sm text-gray-500 mb-4">
                Cette r√©partition s'applique uniquement aux montants retir√©s
                chaque mois pendant la phase de consommation.
              </p>
              <div className="grid grid-cols-2 md:grid-cols-5 gap-4">
                {["realEstate", "stocks", "crypto", "cash", "other"].map(
                  (key) => (
                    <div key={key}>
                      <label className="block text-xs font-medium text-gray-600 mb-1">
                        {key === "realEstate"
                          ? "üè† Immo"
                          : key === "stocks"
                          ? "üìà Actions"
                          : key === "crypto"
                          ? "‚Çø Crypto"
                          : key === "cash"
                          ? "üí∞ Liquidit√©s"
                          : "üîß Autres"}
                      </label>
                      <input
                        type="number"
                        min={0}
                        max={100}
                        step={1}
                        value={Math.round(
                          parameters.monthlyWithdrawalAllocation[key] * 100
                        )}
                        onChange={(e) => {
                          const updated = {
                            ...parameters.monthlyWithdrawalAllocation,
                            [key]: parseFloat(e.target.value) / 100,
                          };
                          setParameters({
                            ...parameters,
                            monthlyWithdrawalAllocation: updated,
                          });
                        }}
                        className="w-full p-2 border border-gray-300 rounded-md text-sm"
                      />
                    </div>
                  )
                )}
              </div>
              <div className="mt-2 text-sm text-gray-500">
                Total:{" "}
                <span
                  className={`font-semibold ${
                    Math.abs(
                      Object.values(
                        parameters.monthlyWithdrawalAllocation
                      ).reduce((a, b) => a + b, 0) - 1
                    ) < 0.01
                      ? "text-green-600"
                      : "text-red-600"
                  }`}
                >
                  {Math.round(
                    Object.values(
                      parameters.monthlyWithdrawalAllocation
                    ).reduce((a, b) => a + b, 0) * 100
                  )}
                  %
                </span>
                {Math.abs(
                  Object.values(parameters.monthlyWithdrawalAllocation).reduce(
                    (a, b) => a + b,
                    0
                  ) - 1
                ) >= 0.01 && (
                  <div className="text-xs text-red-600">
                    ‚ö†Ô∏è Le total doit √™tre √©gal √† 100%
                  </div>
                )}
              </div>
            </div>

            {/* Param√®tres avanc√©s */}
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6 p-4 bg-blue-50 rounded-lg">
              <div>
                <label className="block text-sm font-medium text-blue-700 mb-2">
                  üí∞ Inflation annuelle (%)
                </label>
                <input
                  type="number"
                  step="0.1"
                  value={parameters.inflation * 100}
                  onChange={(e) =>
                    setParameters({
                      ...parameters,
                      inflation: parseFloat(e.target.value) / 100,
                    })
                  }
                  className="w-full p-2 border border-blue-300 rounded-md"
                />
                <div className="text-xs text-blue-600 mt-1">
                  Impact sur le pouvoir d'achat
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-blue-700 mb-2">
                  üèõÔ∏è Fiscalit√© plus-values (%)
                </label>
                <input
                  type="number"
                  step="1"
                  value={parameters.taxRate * 100}
                  onChange={(e) =>
                    setParameters({
                      ...parameters,
                      taxRate: parseFloat(e.target.value) / 100,
                    })
                  }
                  className="w-full p-2 border border-blue-300 rounded-md"
                />
                <div className="text-xs text-blue-600 mt-1">
                  Appliqu√©e lors du rebalancement
                </div>
              </div>
              <div>
                <label className="block text-sm font-medium text-blue-700 mb-2">
                  ‚öñÔ∏è Rebalancement (mois)
                </label>
                <select
                  value={parameters.rebalancingFrequency}
                  onChange={(e) =>
                    setParameters({
                      ...parameters,
                      rebalancingFrequency: parseInt(e.target.value),
                    })
                  }
                  className="w-full p-2 border border-blue-300 rounded-md"
                >
                  <option value={0}>Jamais</option>
                  <option value={1}>Mensuel</option>
                  <option value={3}>Trimestriel</option>
                  <option value={6}>Semestriel</option>
                  <option value={12}>Annuel</option>
                </select>
                <div className="text-xs text-blue-600 mt-1">
                  Fr√©quence de r√©√©quilibrage du portefeuille
                </div>
              </div>
            </div>
            <div className="grid grid-cols-1 lg:grid-cols-5 gap-4">
              {/* Immobilier */}
              <div className="bg-white p-4 rounded-lg shadow-sm">
                <h4 className="font-medium text-gray-800 mb-3 text-center">
                  üè† Immobilier
                </h4>
                <div className="space-y-3">
                  <div>
                    <label className="block text-xs text-gray-600 mb-1">
                      Allocation (%)
                    </label>
                    <input
                      type="number"
                      min="0"
                      max="100"
                      step="1"
                      value={Math.round(parameters.realEstate.allocation * 100)}
                      onChange={(e) =>
                        setParameters({
                          ...parameters,
                          realEstate: {
                            ...parameters.realEstate,
                            allocation: parseFloat(e.target.value) / 100,
                          },
                        })
                      }
                      className="w-full p-2 text-sm border border-gray-300 rounded-md"
                    />
                  </div>
                  <div>
                    <label className="block text-xs text-gray-600 mb-1">
                      Rendement (%)
                    </label>
                    <input
                      type="number"
                      step="0.1"
                      value={parameters.realEstate.return * 100}
                      onChange={(e) =>
                        setParameters({
                          ...parameters,
                          realEstate: {
                            ...parameters.realEstate,
                            return: parseFloat(e.target.value) / 100,
                          },
                        })
                      }
                      className="w-full p-2 text-sm border border-gray-300 rounded-md"
                    />
                  </div>
                  <div>
                    <label className="block text-xs text-gray-600 mb-1">
                      Volatilit√© (%)
                    </label>
                    <input
                      type="number"
                      step="0.1"
                      value={parameters.realEstate.volatility * 100}
                      onChange={(e) =>
                        setParameters({
                          ...parameters,
                          realEstate: {
                            ...parameters.realEstate,
                            volatility: parseFloat(e.target.value) / 100,
                          },
                        })
                      }
                      className="w-full p-2 text-sm border border-gray-300 rounded-md"
                    />
                  </div>
                </div>
              </div>

              {/* Actions */}
              <div className="bg-white p-4 rounded-lg shadow-sm">
                <h4 className="font-medium text-gray-800 mb-3 text-center">
                  üìà Actions
                </h4>
                <div className="space-y-3">
                  <div>
                    <label className="block text-xs text-gray-600 mb-1">
                      Allocation (%)
                    </label>
                    <input
                      type="number"
                      min="0"
                      max="100"
                      step="1"
                      value={Math.round(parameters.stocks.allocation * 100)}
                      onChange={(e) =>
                        setParameters({
                          ...parameters,
                          stocks: {
                            ...parameters.stocks,
                            allocation: parseFloat(e.target.value) / 100,
                          },
                        })
                      }
                      className="w-full p-2 text-sm border border-gray-300 rounded-md"
                    />
                  </div>
                  <div>
                    <label className="block text-xs text-gray-600 mb-1">
                      Rendement (%)
                    </label>
                    <input
                      type="number"
                      step="0.1"
                      value={parameters.stocks.return * 100}
                      onChange={(e) =>
                        setParameters({
                          ...parameters,
                          stocks: {
                            ...parameters.stocks,
                            return: parseFloat(e.target.value) / 100,
                          },
                        })
                      }
                      className="w-full p-2 text-sm border border-gray-300 rounded-md"
                    />
                  </div>
                  <div>
                    <label className="block text-xs text-gray-600 mb-1">
                      Volatilit√© (%)
                    </label>
                    <input
                      type="number"
                      step="0.1"
                      value={parameters.stocks.volatility * 100}
                      onChange={(e) =>
                        setParameters({
                          ...parameters,
                          stocks: {
                            ...parameters.stocks,
                            volatility: parseFloat(e.target.value) / 100,
                          },
                        })
                      }
                      className="w-full p-2 text-sm border border-gray-300 rounded-md"
                    />
                  </div>
                </div>
              </div>

              {/* Crypto */}
              <div className="bg-white p-4 rounded-lg shadow-sm">
                <h4 className="font-medium text-gray-800 mb-3 text-center">
                  ‚Çø Crypto
                </h4>
                <div className="space-y-3">
                  <div>
                    <label className="block text-xs text-gray-600 mb-1">
                      Allocation (%)
                    </label>
                    <input
                      type="number"
                      min="0"
                      max="100"
                      step="1"
                      value={Math.round(parameters.crypto.allocation * 100)}
                      onChange={(e) =>
                        setParameters({
                          ...parameters,
                          crypto: {
                            ...parameters.crypto,
                            allocation: parseFloat(e.target.value) / 100,
                          },
                        })
                      }
                      className="w-full p-2 text-sm border border-gray-300 rounded-md"
                    />
                  </div>
                  <div>
                    <label className="block text-xs text-gray-600 mb-1">
                      Rendement (%)
                    </label>
                    <input
                      type="number"
                      step="0.1"
                      value={parameters.crypto.return * 100}
                      onChange={(e) =>
                        setParameters({
                          ...parameters,
                          crypto: {
                            ...parameters.crypto,
                            return: parseFloat(e.target.value) / 100,
                          },
                        })
                      }
                      className="w-full p-2 text-sm border border-gray-300 rounded-md"
                    />
                  </div>
                  <div>
                    <label className="block text-xs text-gray-600 mb-1">
                      Volatilit√© (%)
                    </label>
                    <input
                      type="number"
                      step="0.1"
                      value={parameters.crypto.volatility * 100}
                      onChange={(e) =>
                        setParameters({
                          ...parameters,
                          crypto: {
                            ...parameters.crypto,
                            volatility: parseFloat(e.target.value) / 100,
                          },
                        })
                      }
                      className="w-full p-2 text-sm border border-gray-300 rounded-md"
                    />
                  </div>
                </div>
              </div>

              {/* Liquidit√©s */}
              <div className="bg-white p-4 rounded-lg shadow-sm">
                <h4 className="font-medium text-gray-800 mb-3 text-center">
                  üí∞ Liquidit√©s
                </h4>
                <div className="space-y-3">
                  <div>
                    <label className="block text-xs text-gray-600 mb-1">
                      Allocation (%)
                    </label>
                    <input
                      type="number"
                      min="0"
                      max="100"
                      step="1"
                      value={Math.round(parameters.cash.allocation * 100)}
                      onChange={(e) =>
                        setParameters({
                          ...parameters,
                          cash: {
                            ...parameters.cash,
                            allocation: parseFloat(e.target.value) / 100,
                          },
                        })
                      }
                      className="w-full p-2 text-sm border border-gray-300 rounded-md"
                    />
                  </div>
                  <div>
                    <label className="block text-xs text-gray-600 mb-1">
                      Rendement (%)
                    </label>
                    <input
                      type="number"
                      step="0.1"
                      value={parameters.cash.return * 100}
                      onChange={(e) =>
                        setParameters({
                          ...parameters,
                          cash: {
                            ...parameters.cash,
                            return: parseFloat(e.target.value) / 100,
                          },
                        })
                      }
                      className="w-full p-2 text-sm border border-gray-300 rounded-md"
                    />
                  </div>
                  <div>
                    <label className="block text-xs text-gray-600 mb-1">
                      Volatilit√© (%)
                    </label>
                    <input
                      type="number"
                      step="0.1"
                      value={parameters.cash.volatility * 100}
                      onChange={(e) =>
                        setParameters({
                          ...parameters,
                          cash: {
                            ...parameters.cash,
                            volatility: parseFloat(e.target.value) / 100,
                          },
                        })
                      }
                      className="w-full p-2 text-sm border border-gray-300 rounded-md"
                    />
                  </div>
                </div>
              </div>

              {/* Autres */}
              <div className="bg-white p-4 rounded-lg shadow-sm">
                <h4 className="font-medium text-gray-800 mb-3 text-center">
                  üîß Autres
                </h4>
                <div className="space-y-3">
                  <div>
                    <label className="block text-xs text-gray-600 mb-1">
                      Allocation (%)
                    </label>
                    <input
                      type="number"
                      min="0"
                      max="100"
                      step="1"
                      value={Math.round(parameters.other.allocation * 100)}
                      onChange={(e) =>
                        setParameters({
                          ...parameters,
                          other: {
                            ...parameters.other,
                            allocation: parseFloat(e.target.value) / 100,
                          },
                        })
                      }
                      className="w-full p-2 text-sm border border-gray-300 rounded-md"
                    />
                  </div>
                  <div>
                    <label className="block text-xs text-gray-600 mb-1">
                      Rendement (%)
                    </label>
                    <input
                      type="number"
                      step="0.1"
                      value={parameters.other.return * 100}
                      onChange={(e) =>
                        setParameters({
                          ...parameters,
                          other: {
                            ...parameters.other,
                            return: parseFloat(e.target.value) / 100,
                          },
                        })
                      }
                      className="w-full p-2 text-sm border border-gray-300 rounded-md"
                    />
                  </div>
                  <div>
                    <label className="block text-xs text-gray-600 mb-1">
                      Volatilit√© (%)
                    </label>
                    <input
                      type="number"
                      step="0.1"
                      value={parameters.other.volatility * 100}
                      onChange={(e) =>
                        setParameters({
                          ...parameters,
                          other: {
                            ...parameters.other,
                            volatility: parseFloat(e.target.value) / 100,
                          },
                        })
                      }
                      className="w-full p-2 text-sm border border-gray-300 rounded-md"
                    />
                  </div>
                </div>
              </div>
            </div>
            {/* V√©rification allocation totale */}
            <div className="mt-4 p-3 bg-white rounded-lg">
              <div className="flex justify-between items-center">
                <span className="text-sm text-gray-600">
                  Allocation totale :
                </span>
                <span
                  className={`font-semibold ${
                    Math.abs(
                      parameters.realEstate.allocation +
                        parameters.stocks.allocation +
                        parameters.crypto.allocation +
                        parameters.cash.allocation +
                        parameters.other.allocation -
                        1
                    ) < 0.01
                      ? "text-green-600"
                      : "text-red-600"
                  }`}
                >
                  {Math.round(
                    (parameters.realEstate.allocation +
                      parameters.stocks.allocation +
                      parameters.crypto.allocation +
                      parameters.cash.allocation +
                      parameters.other.allocation) *
                      100
                  )}
                  %
                </span>
              </div>
              {Math.abs(
                parameters.realEstate.allocation +
                  parameters.stocks.allocation +
                  parameters.crypto.allocation +
                  parameters.cash.allocation +
                  parameters.other.allocation -
                  1
              ) >= 0.01 && (
                <div className="text-xs text-red-600 mt-1">
                  ‚ö†Ô∏è L'allocation totale doit √™tre √©gale √† 100%
                </div>
              )}
            </div>
          </div>
        )}

        {activeTab === "evolution" && (
          <div>
            {/* Graphique principal */}
            <div className="mb-8" style={{ display: "none" }}>
              <h2 className="text-xl font-semibold mb-4">
                √âvolution Probabiliste du Patrimoine
              </h2>
              <div className="h-96">
                <ResponsiveContainer width="100%" height="100%">
                  <AreaChart data={results}>
                    <CartesianGrid strokeDasharray="3 3" />
                    <XAxis
                      dataKey="year"
                      label={{
                        value: "Ann√©es",
                        position: "insideBottom",
                        offset: -5,
                      }}
                    />
                    <YAxis
                      tickFormatter={formatEuro}
                      label={{
                        value: "Patrimoine (‚Ç¨)",
                        angle: -90,
                        position: "insideLeft",
                      }}
                    />
                    <Tooltip
                      formatter={(value) => [formatEuro(value), ""]}
                      labelFormatter={(year) => `Ann√©e ${year}`}
                    />

                    {/* Zones de confiance */}
                    <Area
                      dataKey="p90"
                      stackId="1"
                      stroke="none"
                      fill="#e3f2fd"
                      fillOpacity={0.6}
                    />
                    <Area
                      dataKey="p75"
                      stackId="2"
                      stroke="none"
                      fill="#bbdefb"
                      fillOpacity={0.6}
                    />
                    <Area
                      dataKey="p50"
                      stackId="3"
                      stroke="none"
                      fill="#2196f3"
                      fillOpacity={0.8}
                    />
                    <Area
                      dataKey="p25"
                      stackId="4"
                      stroke="none"
                      fill="#1976d2"
                      fillOpacity={0.6}
                    />
                    <Area
                      dataKey="p10"
                      stackId="5"
                      stroke="none"
                      fill="#0d47a1"
                      fillOpacity={0.6}
                    />

                    <Line
                      type="monotone"
                      dataKey="mean"
                      stroke="#ff9800"
                      strokeWidth={3}
                      dot={false}
                      name="Moyenne"
                    />
                  </AreaChart>
                </ResponsiveContainer>
              </div>

              <div className="mt-4 flex flex-wrap gap-4 text-sm">
                <div className="flex items-center gap-2">
                  <div className="w-4 h-4 bg-blue-900 rounded"></div>
                  <span>10e percentile</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-4 h-4 bg-blue-600 rounded"></div>
                  <span>25e percentile</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-4 h-4 bg-blue-400 rounded"></div>
                  <span>M√©diane</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-4 h-4 bg-blue-200 rounded"></div>
                  <span>75e percentile</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-4 h-4 bg-blue-100 rounded"></div>
                  <span>90e percentile</span>
                </div>
                <div className="flex items-center gap-2">
                  <div className="w-4 h-4 bg-orange-500 rounded"></div>
                  <span>Moyenne</span>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === "allocation" && (
          <div>
            <h2 className="text-xl font-semibold mb-4">
              R√©partition des Actifs
            </h2>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="bg-white p-6 rounded-lg shadow-sm">
                <h3 className="text-lg font-medium mb-4 text-center">
                  Allocation Actuelle
                </h3>
                <div className="h-80">
                  <ResponsiveContainer width="100%" height="100%">
                    <PieChart>
                      <Pie
                        data={pieData}
                        cx="50%"
                        cy="50%"
                        labelLine={false}
                        label={({ name, value }) =>
                          `${name}: ${value.toFixed(1)}%`
                        }
                        outerRadius={80}
                        fill="#8884d8"
                        dataKey="value"
                      >
                        {pieData.map((entry, index) => (
                          <Cell key={`cell-${index}`} fill={entry.color} />
                        ))}
                      </Pie>
                      <Tooltip
                        formatter={(value) => `${Number(value).toFixed(1)}%`}
                      />
                    </PieChart>
                  </ResponsiveContainer>
                </div>
              </div>
              <div className="bg-white p-6 rounded-lg shadow-sm">
                <h3 className="text-lg font-medium mb-4 text-center">
                  R√©partition Finale
                </h3>
                <div className="h-80">
                  <ResponsiveContainer width="100%" height="100%">
                    <PieChart>
                      <Pie
                        data={Object.entries(finalAllocations).map(
                          ([key, val]) => ({
                            name:
                              key === "realEstate"
                                ? "üè† Immobilier"
                                : key === "stocks"
                                ? "üìà Actions"
                                : key === "crypto"
                                ? "‚Çø Crypto"
                                : key === "cash"
                                ? "üí∞ Liquidit√©s"
                                : "üîß Autres",
                            value: val * 100,
                            color:
                              key === "realEstate"
                                ? "#8B5CF6"
                                : key === "stocks"
                                ? "#3B82F6"
                                : key === "crypto"
                                ? "#F59E0B"
                                : key === "cash"
                                ? "#10B981"
                                : "#EF4444",
                          })
                        )}
                        cx="50%"
                        cy="50%"
                        labelLine={false}
                        label={({ name, value }) =>
                          `${name}: ${value.toFixed(1)}%`
                        }
                        outerRadius={80}
                        fill="#8884d8"
                        dataKey="value"
                      >
                        {Object.entries(finalAllocations).map(
                          ([key, val], index) => (
                            <Cell
                              key={`cell-${index}`}
                              fill={
                                key === "realEstate"
                                  ? "#8B5CF6"
                                  : key === "stocks"
                                  ? "#3B82F6"
                                  : key === "crypto"
                                  ? "#F59E0B"
                                  : key === "cash"
                                  ? "#10B981"
                                  : "#EF4444"
                              }
                            />
                          )
                        )}
                      </Pie>
                      <Tooltip
                        formatter={(value) => `${Number(value).toFixed(1)}%`}
                      />
                    </PieChart>
                  </ResponsiveContainer>
                </div>
              </div>

              <div className="bg-white p-6 rounded-lg shadow-sm">
                <h3 className="text-lg font-medium mb-4 text-center">
                  D√©tail des Allocations
                </h3>
                <div className="space-y-4">
                  {pieData.map((item, index) => (
                    <div
                      key={index}
                      className="flex items-center justify-between p-3 bg-gray-50 rounded-lg"
                    >
                      <div className="flex items-center gap-3">
                        <div
                          className="w-4 h-4 rounded"
                          style={{ backgroundColor: item.color }}
                        ></div>
                        <span className="font-medium">{item.name}</span>
                      </div>
                      <div className="text-right">
                        <div className="font-bold">
                          {item.value.toFixed(1)}%
                        </div>
                        <div className="text-sm text-gray-600">
                          {formatEuro(
                            parameters.initialValue * (item.value / 100)
                          )}
                        </div>
                      </div>
                    </div>
                  ))}
                </div>
              </div>
              <div className="mt-6 bg-white p-6 rounded-lg shadow-sm">
                <h3 className="text-lg font-semibold text-gray-800 mb-4">
                  üßÅ R√©partition Finale (approximation)
                </h3>
                <div className="space-y-4">
                  {Object.entries(finalAllocations).map(([key, val], index) => {
                    const colors = [
                      "#8B5CF6",
                      "#3B82F6",
                      "#F59E0B",
                      "#10B981",
                      "#EF4444",
                    ];
                    const name =
                      key === "realEstate"
                        ? "üè† Immobilier"
                        : key === "stocks"
                        ? "üìà Actions"
                        : key === "crypto"
                        ? "‚Çø Crypto"
                        : key === "cash"
                        ? "üí∞ Liquidit√©s"
                        : "üîß Autres";

                    return (
                      <div
                        key={index}
                        className="flex items-center justify-between p-3 bg-gray-50 rounded-lg"
                      >
                        <div className="flex items-center gap-3">
                          <div
                            className="w-4 h-4 rounded"
                            style={{ backgroundColor: colors[index] }}
                          ></div>
                          <span className="font-medium">{name}</span>
                        </div>
                        <div className="text-right">
                          <div className="font-bold">
                            {(val * 100).toFixed(1)}%
                          </div>
                          <div className="text-sm text-gray-600">
                            {formatEuro(stats.median * val)}
                          </div>
                        </div>
                      </div>
                    );
                  })}
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === "risk" && (
          <div>
            <h2 className="text-xl font-semibold mb-4">Analyse de Risque</h2>
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
              <div className="bg-white p-6 rounded-lg shadow-sm">
                <h3 className="text-lg font-medium mb-4">
                  Probabilit√© de Ruine
                </h3>
                <div className="h-80">
                  <ResponsiveContainer width="100%" height="100%">
                    <LineChart data={ruinProbability}>
                      <CartesianGrid strokeDasharray="3 3" />
                      <XAxis
                        dataKey="year"
                        label={{
                          value: "Ann√©es",
                          position: "insideBottom",
                          offset: -5,
                        }}
                      />
                      <YAxis
                        label={{
                          value: "Probabilit√© (%)",
                          angle: -90,
                          position: "insideLeft",
                        }}
                      />
                      <Tooltip
                        formatter={(value) => [
                          `${Number(value).toFixed(2)}%`,
                          "Probabilit√©",
                        ]}
                      />

                      <Line
                        type="monotone"
                        dataKey="probability"
                        stroke="#ef4444"
                        strokeWidth={3}
                        dot={{ fill: "#ef4444", strokeWidth: 2, r: 4 }}
                      />
                    </LineChart>
                  </ResponsiveContainer>
                </div>
                <div className="mt-4 p-3 bg-red-50 rounded-lg">
                  <p className="text-sm text-red-700">
                    üìä Cette courbe montre la probabilit√© cumulative que votre
                    patrimoine tombe √† z√©ro au fil des ann√©es.
                  </p>
                </div>
              </div>

              <div className="bg-white p-6 rounded-lg shadow-sm">
                <h3 className="text-lg font-medium mb-4">
                  M√©triques de Risque
                </h3>
                <div className="space-y-4">
                  <div className="p-4 bg-red-50 rounded-lg">
                    <div className="flex justify-between items-center">
                      <span className="font-medium text-red-800">
                        Probabilit√© de ruine totale
                      </span>
                      <span className="font-bold text-red-600">
                        {ruinProbability.length > 0
                          ? `${ruinProbability[
                              ruinProbability.length - 1
                            ]?.probability.toFixed(1)}%`
                          : "0%"}
                      </span>
                    </div>
                    <div className="text-sm text-red-600 mt-1">
                      Sur {parameters.timeHorizon} ans
                    </div>
                  </div>

                  <div className="p-4 bg-orange-50 rounded-lg">
                    <div className="flex justify-between items-center">
                      <span className="font-medium text-orange-800">
                        Volatilit√© du portefeuille
                      </span>
                      <span className="font-bold text-orange-600">
                        {(
                          Math.sqrt(
                            Math.pow(
                              parameters.realEstate.allocation *
                                parameters.realEstate.volatility,
                              2
                            ) +
                              Math.pow(
                                parameters.stocks.allocation *
                                  parameters.stocks.volatility,
                                2
                              ) +
                              Math.pow(
                                parameters.crypto.allocation *
                                  parameters.crypto.volatility,
                                2
                              ) +
                              Math.pow(
                                parameters.cash.allocation *
                                  parameters.cash.volatility,
                                2
                              ) +
                              Math.pow(
                                parameters.other.allocation *
                                  parameters.other.volatility,
                                2
                              )
                          ) * 100
                        ).toFixed(1)}
                        %
                      </span>
                    </div>
                    <div className="text-sm text-orange-600 mt-1">
                      Estimation simplifi√©e
                    </div>
                  </div>

                  <div className="p-4 bg-blue-50 rounded-lg">
                    <div className="flex justify-between items-center">
                      <span className="font-medium text-blue-800">
                        Rendement attendu
                      </span>
                      <span className="font-bold text-blue-600">
                        {(
                          (parameters.realEstate.allocation *
                            parameters.realEstate.return +
                            parameters.stocks.allocation *
                              parameters.stocks.return +
                            parameters.crypto.allocation *
                              parameters.crypto.return +
                            parameters.cash.allocation *
                              parameters.cash.return +
                            parameters.other.allocation *
                              parameters.other.return) *
                          100
                        ).toFixed(1)}
                        %
                      </span>
                    </div>
                    <div className="text-sm text-blue-600 mt-1">
                      Rendement pond√©r√© annuel
                    </div>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {/* Graphique principal */}
        <div className="mb-8">
          <h2 className="text-xl font-semibold mb-4">
            √âvolution Probabiliste du Patrimoine
          </h2>
          <div className="h-96">
            <ResponsiveContainer width="100%" height="100%">
              <AreaChart data={results}>
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis
                  dataKey="year"
                  label={{
                    value: "Ann√©es",
                    position: "insideBottom",
                    offset: -5,
                  }}
                />
                <YAxis
                  tickFormatter={formatEuro}
                  label={{
                    value: "Patrimoine (‚Ç¨)",
                    angle: -90,
                    position: "insideLeft",
                  }}
                />
                <Tooltip
                  formatter={(value) => [formatEuro(value), ""]}
                  labelFormatter={(year) => `Ann√©e ${year}`}
                />

                {/* Zones de confiance */}
                <Area
                  dataKey="p90"
                  stackId="1"
                  stroke="none"
                  fill="#e3f2fd"
                  fillOpacity={0.6}
                />
                <Area
                  dataKey="p75"
                  stackId="2"
                  stroke="none"
                  fill="#bbdefb"
                  fillOpacity={0.6}
                />
                <Area
                  dataKey="p50"
                  stackId="3"
                  stroke="none"
                  fill="#2196f3"
                  fillOpacity={0.8}
                />
                <Area
                  dataKey="p25"
                  stackId="4"
                  stroke="none"
                  fill="#1976d2"
                  fillOpacity={0.6}
                />
                <Area
                  dataKey="p10"
                  stackId="5"
                  stroke="none"
                  fill="#0d47a1"
                  fillOpacity={0.6}
                />

                <Line
                  type="monotone"
                  dataKey="mean"
                  stroke="#ff9800"
                  strokeWidth={3}
                  dot={false}
                  name="Moyenne"
                />
              </AreaChart>
            </ResponsiveContainer>
          </div>

          <div className="mt-4 flex flex-wrap gap-4 text-sm">
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 bg-blue-900 rounded"></div>
              <span>10e percentile</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 bg-blue-600 rounded"></div>
              <span>25e percentile</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 bg-blue-400 rounded"></div>
              <span>M√©diane</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 bg-blue-200 rounded"></div>
              <span>75e percentile</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 bg-blue-100 rounded"></div>
              <span>90e percentile</span>
            </div>
            <div className="flex items-center gap-2">
              <div className="w-4 h-4 bg-orange-500 rounded"></div>
              <span>Moyenne</span>
            </div>
          </div>
        </div>

        {/* Statistiques */}
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 mb-6">
          <div className="bg-green-50 p-4 rounded-lg text-center">
            <div className="text-2xl font-bold text-green-600">
              {formatEuro(stats.mean)}
            </div>
            <div className="text-sm text-gray-600">Patrimoine moyen</div>
            <div className="text-xs text-green-500 mt-1">
              R√©el: {formatEuro(stats.realMean)} (pouvoir d'achat)
            </div>
          </div>
          <div className="bg-blue-50 p-4 rounded-lg text-center">
            <div className="text-2xl font-bold text-blue-600">
              {formatEuro(stats.median)}
            </div>
            <div className="text-sm text-gray-600">M√©diane</div>
            <div className="text-xs text-blue-500 mt-1">
              R√©el: {formatEuro(stats.realMedian)}
            </div>
          </div>
          <div className="bg-red-50 p-4 rounded-lg text-center">
            <div className="text-2xl font-bold text-red-600">
              {stats.probabilityLoss?.toFixed(1)}%
            </div>
            <div className="text-sm text-gray-600">Probabilit√© de perte</div>
            <div className="text-xs text-red-500 mt-1">
              Par rapport √† l'investissement initial
            </div>
          </div>
          <div className="bg-purple-50 p-4 rounded-lg text-center">
            <div className="text-2xl font-bold text-purple-600">
              {stats.probabilityDoubling?.toFixed(1)}%
            </div>
            <div className="text-sm text-gray-600">Probabilit√© de doubler</div>
            <div className="text-xs text-purple-500 mt-1">
              En valeur nominale
            </div>
          </div>
        </div>

        {/* Sc√©narios */}
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="bg-red-50 p-4 rounded-lg">
            <h3 className="font-semibold text-red-800 mb-2">
              Sc√©nario Pessimiste (10e percentile)
            </h3>
            <div className="text-xl font-bold text-red-600">
              {formatEuro(stats.p10)}
            </div>
            <div className="text-sm text-gray-600 mt-2">
              Dans les 10% des cas les plus d√©favorables
            </div>
          </div>

          <div className="bg-blue-50 p-4 rounded-lg">
            <h3 className="font-semibold text-blue-800 mb-2">
              Sc√©nario M√©dian
            </h3>
            <div className="text-xl font-bold text-blue-600">
              {formatEuro(stats.median)}
            </div>
            <div className="text-sm text-gray-600 mt-2">
              50% de chance d'√™tre au-dessus de cette valeur
            </div>
          </div>

          <div className="bg-green-50 p-4 rounded-lg">
            <h3 className="font-semibold text-green-800 mb-2">
              Sc√©nario Optimiste (90e percentile)
            </h3>
            <div className="text-xl font-bold text-green-600">
              {formatEuro(stats.p90)}
            </div>
            <div className="text-sm text-gray-600 mt-2">
              Dans les 10% des cas les plus favorables
            </div>
          </div>
        </div>

        <div className="mt-6 p-4 bg-yellow-50 rounded-lg">
          <h3 className="font-semibold text-yellow-800 mb-2">
            ‚ö†Ô∏è Avertissement
          </h3>
          <p className="text-sm text-yellow-700 mb-2">
            Cette simulation est bas√©e sur des hypoth√®ses statistiques et ne
            constitue pas une garantie de performance future. Les rendements
            pass√©s ne pr√©jugent pas des rendements futurs. Les march√©s
            financiers sont impr√©visibles.
          </p>
          {parameters.monthlyContribution < 0 && (
            <p className="text-sm text-orange-700 font-medium mb-2">
              üìä <strong>Mode "Vivre de ses rentes"</strong> : Vous retirez{" "}
              {formatEuro(Math.abs(parameters.monthlyContribution * 12))} par an
              de votre patrimoine. Attention au risque d'√©puisement si les
              rendements sont insuffisants !
            </p>
          )}
          <div className="mt-3 p-3 bg-white rounded border-l-4 border-blue-500">
            <p className="text-sm text-blue-700">
              üìà <strong>Nouveaut√©s avanc√©es</strong> : Inflation (
              {(parameters.inflation * 100).toFixed(1)}%), fiscalit√© (
              {(parameters.taxRate * 100).toFixed(0)}%), rebalancement{" "}
              {parameters.rebalancingFrequency === 0
                ? "d√©sactiv√©"
                : parameters.rebalancingFrequency === 1
                ? "mensuel"
                : parameters.rebalancingFrequency === 3
                ? "trimestriel"
                : parameters.rebalancingFrequency === 6
                ? "semestriel"
                : "annuel"}
              .
            </p>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Simulateur;
